--[[
Blood in the Clocktower Scripted
Made by Sionar
UI code borrowed from Lost Savage and SilentxDream
--]]


------------------Constants
MOD_NAME = 'Blood on the Clocktower'
VERSION = '16.2.1'
DEBUG = false
START_MESSAGE = 'Blood on the Clocktower\n Version [00FF00]' .. VERSION .. '[-]\n\n[89C381]Player chat commands:[-]\n[967BB6]c[-] : See the list of chat commands.\n[967BB6]h[-] : Show the vote history.\n[967BB6]r[-] : show your character.\n[967BB6]v[-] : Show the version number.\n\n[89C381]Storyteller commands:[-]\n[967BB6].move[-] [B8F161]player[-] [E29A8A]color[-] : Move a player to a color.\n[967BB6].remove[-] [E29A8A]color[-] : Move a color to Grey.\n[967BB6].swap[-] [E29A8A]color[-] [E29A8A]color[-]: Swap two colors + characters.\n[FF007F].Magenta[-] [967BB6].Lavender[-] [616BD4].Navy[-] [49D5FD].Cyan[-] [89C381].Mint[-]\n[B8F161].Lime[-] [F1D4A2].Peach[-] [E29A8A].Coral[-] [800000].Maroon[-] [BEBEBE].Silver[-]:\nPrivately message those players.'
HELP_MESSAGE = '[89C381]Player chat commands:[-]\n[967BB6]c[-] : See the list of chat commands.\n[967BB6]h[-] : Show the vote history.\n[967BB6]r[-] : show your character.\n[967BB6]v[-] : Show the version number.\n\n[89C381]Storyteller commands:[-]\n[967BB6].move[-] [B8F161]player[-] [E29A8A]color[-] : Move a player to a color.\n[967BB6].remove[-] [E29A8A]color[-] : Move a color to Grey.\n[967BB6].swap[-] [E29A8A]color[-] [E29A8A]color[-]: Swap two colors + characters.\n[FF007F].Magenta[-] [967BB6].Lavender[-] [616BD4].Navy[-] [49D5FD].Cyan[-] [89C381].Mint[-]\n[B8F161].Lime[-] [F1D4A2].Peach[-] [E29A8A].Coral[-] [800000].Maroon[-] [BEBEBE].Silver[-]:\nPrivately message those players.'
COLORS = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}
COLORS_EX = {'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
COLORS_ALL = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
COLORS_BBC = {White = '[FFFFFF]', Brown = '[703A16]', Red = '[DA1917]', Orange = '[F3631C]', Yellow = '[E6E42B]', Green = '[30B22A]', Teal = '[20B09A]', Blue = '[1E87FF]', Purple = '[9F1FEF]', Pink = '[F46FCD]', Magenta = '[FF007F]', Lavender = '[967BB6]', Navy = '[616BD4]', Cyan = '[49D5FD]', Mint = '[89C381]', Lime = '[B8F161]', Peach = '[F1D4A2]', Coral = '[E29A8A]', Maroon = '[800000]', Silver = '[BEBEBE]'}
COLORS_RGB = {White = {1,1,1}, Brown = {113/255,59/255,23/255}, Red = {219/255,26/255,24/255}, Orange = {244/255,100/255,29/255}, Yellow = {231/255,229/255,44/255}, Green = {49/255,179/255,43/255}, Teal = {33/255,177/255,155/255}, Blue = {31/255,136/255,255/255}, Purple = {160/255,32/255,240/255}, Pink = {245/255,112/255,206/255}, Magenta = {255/255,0/255,127/255,0.5}, Lavender = {150/255,123/255,182/255}, Navy = {0/255,0/255,128/255}, Cyan = {73/255,213/255,253/255}, Mint = {137/255,195/255,129/255}, Lime = {184/255,241/255,97/255}, Peach = {241/255,212/255,162/255}, Coral = {226/255,154/255,138/255}, Maroon = {128/255,0,0}, Silver = {190/255,190/255,190/255},}
FAKE_ZONE_RGB = {Magenta = {255/255,0/255,127/255,0.25}, Lavender = {150/255,123/255,182/255,0.25}, Navy = {0/255,0/255,128/255,0.25}, Cyan = {73/255,213/255,253/255,0.25}, Mint = {137/255,195/255,129/255,0.25}, Lime = {184/255,241/255,97/255,0.25}, Peach = {241/255,212/255,162/255,0.25}, Coral = {226/255,154/255,138/255,0.25}, Maroon = {128/255,0,0,0.25}, Silver = {190/255,190/255,190/255,0.25},}
VOTEHAND_SHOW_SCALE = {3,1,3}
VOTEHAND_HIDE_SCALE = {0.01,0.01,0.01}

TABLE_GUID = '7f1f5f'
NIGHT_HELPER_GUID = 'bb89aa'
CLOCK_CONTROLS_GUID = '184d11'
TEAM_TOOL_GUID = '6fbc83'
PURPLE_HAND_GUID = '88ad59'
BLUE_HAND_GUID = '12ad6f'
RED_HAND_GUID = 'eaee43'
CLOCK_GUID = '0d5f75'
SCRIPTING_ZONE_GUID = 'a17a77'
ZONE_GUIDS = {Black = 'cf55c7', White = '3fbf54', Brown = '0bbe0f', Red = 'f8da43', Orange = '1af215', Yellow = '9c2b70', Green = '7fd6f6', Teal = '5e5e3d', Blue = '23abba', Purple = '450eab', Pink = '834ef0', Magenta = '96a42d', Lavender = '7b2386', Navy = '494209', Cyan = '604320', Mint = 'c6330e', Lime = 'c0e83a', Peach = 'ccc4cd', Coral = 'a89813', Maroon = '989c33', Silver = '37fabf'}
TEXT_GUIDS = {Magenta = '1f5c30', Lavender = 'b6123b', Navy = 'aaf90e', Cyan = 'f91039', Mint = '7ccfd8', Lime = '955539', Peach = '5e50cf', Coral = '516c8f', Maroon = 'c71439', Silver = '25fc49', Version = '276848'}
AVATAR_LIGHT_GUIDS = {Magenta = '2f23e0', Lavender = 'df8ffd', Navy = 'a4df0a', Cyan = '9e4db0', Mint = 'a32fa1', Lime = '7830b8', Peach = 'c83e23', Coral = '81444e', Maroon = 'cf48c9', Silver = 'c0e7c1'}
NIGHT_LIGHT_GUIDS = {Table = 'c90087', Black = 'afd88b', White = '8e52a5', Brown = 'fded4d', Red = '448bf2', Orange = '20ddd6', Yellow = '598d41', Green = '36f6d8', Teal = 'c88bf0', Blue = '16bfe5', Purple = 'ff418c', Pink = '8827cb', Magenta = 'a52b26', Lavender = 'a07e05', Navy = 'eb5eb1', Cyan = '75c1ed', Mint = 'ccb91a', Lime = '7b3c62', Peach = '339595', Coral = '5c6b6d', Maroon = '60d3eb', Silver = '992bf1'}
ALIVE_BASE_GUIDS = {White = '56627e', Brown = '3c798c', Red = '2e008b', Orange = '4f9c19', Yellow = '9872ef', Green = '8d3944', Teal = 'd96881', Blue = '042a74', Purple = '0d98a5', Pink = '969b3b', Magenta = '4b9fd7', Lavender = '07c7fc', Navy = '2655ea', Cyan = 'b370ab', Mint = 'b1b554',  Lime = '6b1f76', Peach = '5de91f', Coral = '775d89', Maroon = 'e7050a', Silver = '48ee96'}
ALIVE_TOKEN_GUIDS = {White = 'e086a9', Brown = '1ee3a8', Red = '295c1a', Orange = '8d0617', Yellow = '6c495f', Green = '3871b1', Teal = 'e093e4', Blue = '33f167', Purple = '61ec25', Pink = '4f2471', Magenta = '2eb912', Lavender = 'ec1a85', Navy = 'f451d7', Cyan = 'b0a452', Mint = '5d12f3', Lime = '9bd823', Peach = '9635c8', Coral = '781ec7', Maroon = 'f87b13', Silver = 'e666d2'}
VOTE_PANEL_GUIDS = {White = '5eb60a', Brown = '99b89d', Red = '83bfb8', Orange = '4bff0a', Yellow = 'ccf37c', Green = '57b463', Teal = '47aff8', Blue = 'c2f614', Purple = '77ef86', Pink = '8b7a08', Magenta = '0be973', Lavender = 'eb07d8', Navy = '958d03', Cyan = '40952d', Mint = '99ffd7', Lime = '9d5300', Peach = '39111c', Coral = '2612cf', Maroon = 'c85c07', Silver = '5d6725',}
VOTEHAND_GUIDS = {White = '7d483f', Brown = 'd04712', Red = '5f127b', Orange = 'cd9709', Yellow = '77fafc', Green = '252431', Teal = '0f6d9f', Blue = '0ae7c8', Purple = '002931', Pink = '971c6f', Magenta = 'bf3d0e', Lavender = '9e5049', Navy = 'c5c592', Cyan = '2b4030', Mint = '23e513', Lime = 'd4ee32', Peach = '1d92dd', Coral = '58ad10', Maroon = '3e670e', Silver = '72ea95'}
CHAR_SHEET_GUIDS_TB = {White = '7e8816', Brown = 'f59d97', Red = 'd3f94f', Orange = '74a1bb', Yellow = '3c8021', Green = 'f42ef4', Teal = '4c0520', Blue = '176862', Purple = 'a872de', Pink = 'd79c68', Magenta = 'f332be', Lavender = 'e3323e', Navy = '73de24', Cyan = 'b913d3', Mint = 'f2eecc', Lime = '6730eb', Peach = '98a909', Coral = '748526', Maroon = 'ef6ac7', Silver = '3258d7'}
CHAR_SHEET_GUIDS_BM = {White = '49666f', Brown = '310d86', Red = 'd09bb7', Orange = '6e1318', Yellow = '9ffd3b', Green = '674ac7', Teal = '28f902', Blue = '98a423', Purple = 'f3bb6f', Pink = '8721d3', Magenta = '793761', Lavender = '81ade5', Navy = '53e3d9', Cyan = 'c89b19', Mint = 'c94ca5', Lime = '27a7d6', Peach = '1e6331', Coral = 'a472a7', Maroon = 'c15727', Silver = 'b693a5',}
CHAR_SHEET_GUIDS_SV = {White = '87bc56', Brown = 'c4c57e', Red = '58ece2', Orange = '5f523a', Yellow = 'bc0275', Green = '531a2a', Teal = '9dd592', Blue = 'fbdc69', Purple = 'c096af', Pink = '44a632', Magenta = '7fa413', Lavender = '85dfac', Navy = 'c79858', Cyan = '330c9d', Mint = 'b4fa88', Lime = 'e9e503', Peach = '745bdd', Coral = 'b3b035', Maroon = 'ab2437', Silver = 'dbe7f7',}
CHAR_SHEET_GUIDS_CU = {White = 'a56758', Brown = '1e5461', Red = 'bc13b3', Orange = 'cb9aeb', Yellow = '578b2f', Green = '82f9f5', Teal = 'e3f397', Blue = 'd18938', Purple = '4baef3', Pink = '8b1b5a', Magenta = '7c5b4f', Lavender = '92b01a', Navy = 'b19bd8', Cyan = '50ae25', Mint = '6de365', Lime = '48dc0c', Peach = '3a069c', Coral = 'f5da9a', Maroon = '578321', Silver = '83492a',}


------------------Variables
tableSize = 10
jokersDefault = false
timerID = 0
started = false
lights = false
mode = 'TB'
notes = ''
history = '[FFFFFF]Vote History:[-]'
currentNominator = ''
currentNominated = ''
numAlive = 0
numPlayers = 0
currAlive = 0
currVotes = 0
currPlayers = 0
colors = {}
chars = {}
aliveTokens = {}
canNominate = {}
canBeNominated = {}
living = {}
hasVote = {}
voted = {}
voteLock = {}
voteButtonsOn = {}
tokenTable = {}

for k,v in pairs(COLORS_ALL) do
    aliveTokens[v] = {object = 0, vote = 0}
    canNominate[v] = true
    canBeNominated[v] = true
    living[v] = true
    hasVote[v] = true
    voted[v] = false
    voteLock[v] = false
    voteButtonsOn[v] = false
end

players = {}
playersEx = {}
playersExIds = {}
avatarGuids = {}
for k,v in pairs(COLORS_EX) do
    playersEx[v] = nil
    playersExIds[v] = nil
    avatarGuids[v] = nil
end

avatarUrl = ''
uiColor = {}
uiMsg = ''
colorTable = false
customSet = false
customList = {}
customBoardGuids = {}


------------------Functions
function onLoad(saveString)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        jokersDefault = save['j']
        started = save['s']
        mode = save['m']
        chars = save['r']
        history = save['h']
        playersExIds = save['p']
        avatarGuids = save['a']
        customSet = save['c']
        customList = save['cl']
        customBoardGuids = save['cb']
        tableSize = save['t']
        colors = save['co']
        angle = save['an']
        lights = save ['l']
    end
    Turns.order = {'Black', 'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}

    if not started then
        notes = START_MESSAGE
        setNotes(notes)
        updateNotebookTabs()
    end

    for k,v in pairs(NIGHT_LIGHT_GUIDS) do
        obj = getObjectFromGUID(v)
        if DEBUG then
            obj.setScale({1,1,1})
        else
            obj.setScale({0.01,0.01,0.01})
        end
    end

    local obj
    obj = getObjectFromGUID(TABLE_GUID)
    if obj then
        obj.interactable = false
    end
    for k,v in pairs(VOTE_PANEL_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end
    for k,v in pairs(ALIVE_BASE_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.setLock(true)
            obj.interactable = false
        end
    end
    if not started then
        for k,v in pairs(ALIVE_TOKEN_GUIDS) do
            obj = getObjectFromGUID(v)
            if obj then
                obj.setLock(true)
                obj.interactable = false
            end
        end
    end
    for k,v in pairs(VOTEHAND_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.setLock(true)
            obj.interactable = false
        end
    end

    hideCharSheets()

    for k,v in pairs(TEXT_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end
    obj = getObjectFromGUID(TEXT_GUIDS['Version'])
    obj.setValue('v ' .. VERSION)



    updatePlayers()
    refreshUI()
    showExtensionUI()

    Wait.time(refreshObjects,10)
    Wait.time(refreshNotes,1,-1)
    Wait.time(updateTokenStatus,2,-1)
end

function onSave()
    local save = {}
    save['j'] = jokersDefault
    save['s'] = started
    save['m'] = mode
    save['r'] = chars
    save['h'] = history
    save['p'] = playersExIds
    save['a'] = avatarGuids
    save['c'] = customSet
    save['cl'] = customList
    save['cb'] = customBoardGuids
    save['t'] = tableSize
    save['co'] = colors
    save['an'] = angle
    save['l'] = lights
    local saveString = JSON.encode(save)
    return saveString
end

function updateNotebookTabs()
    editNotebookTab(6, TB_LIST, 'Trouble Brewing Characters')
    editNotebookTab(5, BM_LIST, 'Bad Moon Rising Characters')
    editNotebookTab(4, SV_LIST, 'Sects & Violets Characters')
end

function editNotebookTab(tabIndex, charList, title)
    local tab = {index = tabIndex, title = title, color = 'Grey'}
    local text = ''

    for k,v in pairs(TYPES) do
        text = text .. '[i]' .. v .. '[/i]\r\n'
        for k1,v1 in pairs(charList) do
            if CHARACTERS[v1].Type == v then
                text = text .. '\r\n[b]' .. string.gsub(v1, '_', ' ') .. '[/b] - ' .. CHARACTERS[v1].Description
            end
        end
        text = text .. '\r\n\n\r\n'
    end

    tab.body = text
    Notes.editNotebookTab(tab)
end

function hideCharSheets()
    local obj
    for k,v in pairs(COLORS_EX) do
        if mode == 'TB' then
            obj = getObjectFromGUID(CHAR_SHEET_GUIDS_TB[v])
        elseif mode == 'BM' then
            obj = getObjectFromGUID(CHAR_SHEET_GUIDS_BM[v])
        elseif mode == 'SV' then
            obj = getObjectFromGUID(CHAR_SHEET_GUIDS_SV[v])
        elseif mode == 'CU' then
            obj = getObjectFromGUID(CHAR_SHEET_GUIDS_CU[v])
        end
        if obj then
            obj.setInvisibleTo({'White','Brown','Red','Orange','Yellow','Green','Teal','Blue','Purple','Pink'})
        end
    end
end

function refreshObjects()
    local obj
    obj = getObjectFromGUID(TEAM_TOOL_GUID)
    if obj then
        obj.reload()
    end

    for k,v in pairs(VOTEHAND_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.reload()
        end
    end

    for k,v in pairs(VOTE_PANEL_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.reload()
        end
    end

    for k,v in pairs(ALIVE_BASE_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.reload()
        end
    end

    for k,v in pairs(ALIVE_TOKEN_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.reload()
        end
    end

    Wait.time(lockObjects, 5)
end

function lockObjects()
    local obj

    for k,v in pairs(VOTEHAND_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end

    for k,v in pairs(ALIVE_BASE_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end

    if not started then
        for k,v in pairs(ALIVE_TOKEN_GUIDS) do
            obj = getObjectFromGUID(v)
            if obj then
                obj.interactable = false
            end
        end
    end
end

function refreshNotes()
    setNotes(notes)
end

function updateTokenStatus()
    updatePlayers()
    for k,v in pairs(COLORS_ALL) do
        getAliveTokens(v)
    end
    handleLifeUI()
end

function updatePlayers()
    local allPlayers = Player.getPlayers()
    local found
    local textObj

    for k,v in pairs(COLORS) do
        if Player[v].seated then
            players[v] = Player[v]
        else
            players[v] = nil
        end
    end
    if Player['Black'].seated then
        players['Black'] = Player['Black']
    else
        players['Black'] = nil
    end

    for k,v in pairs(COLORS_EX) do
        if playersExIds[v] == nil then    --no id for that color
            playersEx[v] = nil
        else
            found = nil
            for k1,v1 in pairs(allPlayers) do
                if v1.steam_id == playersExIds[v] and v1.color == 'Grey' then
                    found = v1
                    break
                end
            end
            if found == nil then        --cannot find player with that id
                playersExIds[v] = nil
                playersEx[v] = nil
                textObj = getObjectFromGUID(TEXT_GUIDS[v])
                textObj.setValue(' ')
                for i = 11, 20 do
                    UI.setAttribute('sit' .. tableSize .. v, 'text', 'Sit in ' .. v)
                end
                deleteAvatar(v)
            else
                playersEx[v] = found
            end
        end
        players[v] = playersEx[v]
    end
    return players
end

function getAliveTokens(color)
    local base = getObjectFromGUID(ALIVE_BASE_GUIDS[color])
    local pos = base.getPosition()
    local aliveTokenFound = false
    local voteTokenFound = false
    local objectsFound = Physics.cast({
        origin       = pos,
        direction    = {0, 1, 0},
        type         = 1, -- int (1: Ray, 2: Sphere, 3: Box),
        max_distance = 3,
        debug        = false-- bool (true = visualize cast),
    }) -- returns { {Vector point, Vector normal, float distance, Object hit_object}, {...}, ...}

    for i, hit in ipairs(objectsFound) do
        if hit.hit_object.getName() == 'Alive Token' then
            aliveTokens[color].object = hit.hit_object
            aliveTokenFound = true
        elseif hit.hit_object.getName() == 'Vote Token' then
            aliveTokens[color].vote = hit.hit_object
            voteTokenFound = true
        end
    end
    if not voteTokenFound then
        aliveTokens[color].vote = 0
    end
    if not aliveTokenFound then
        aliveTokens[color].object = 0
    end
end

function handleLifeUI()
    numAlive = 0
    numPlayers = 0
    local numberOfSkipped = 0 -- number of players not seated
    local numberOfVotes = 0
    local votesNeeded = 0
    local playerDist
    local allObjects = getAllObjects()
    local allPlayers = Player.getPlayers()

    for i=1, 20 do
        if aliveTokens[COLORS_ALL[i]].object ~= 0 and players[COLORS_ALL[i]] ~= nil then
            if started and i <= 10 and getObjectFromGUID(ZONE_GUIDS[COLORS[i]]).getValue() == 'Grey' and #allPlayers > 1 then
                getObjectFromGUID(ZONE_GUIDS[COLORS[i]]).setValue(COLORS[i])
            end
            numPlayers = numPlayers + 1
            if aliveTokens[COLORS_ALL[i]].object.is_face_down == true then -- if life token is face down...
                if aliveTokens[COLORS_ALL[i]].vote ~= 0 then -- ..then if a vote token is present
                    UI.setAttribute('aliveImage'..i - numberOfSkipped, 'image', 'deadWithVote'..i)  -- counting skipped players to only make last images transparent
                    numberOfVotes = numberOfVotes + 1
                else
                    UI.setAttribute('aliveImage'..i - numberOfSkipped, 'image', 'deadNoVote') -- counting skipped players to only make last images transparent
                end
            else
                UI.setAttribute('aliveImage'..i - numberOfSkipped, 'image', 'alive'..i) -- counting skipped players to only make last images transparent
                numAlive = numAlive +1
                numberOfVotes = numberOfVotes + 1
            end
        else
            if started and i <= 10 and getObjectFromGUID(ZONE_GUIDS[COLORS[i]]) ~= nil and getObjectFromGUID(ZONE_GUIDS[COLORS[i]]).getValue() ~= 'Grey' and #allPlayers > 1 then
                getObjectFromGUID(ZONE_GUIDS[COLORS[i]]).setValue('Grey')
            end
            numberOfSkipped = numberOfSkipped +1
            UI.setAttribute('aliveImage'..21 - numberOfSkipped, 'image', 'empty') -- starting from 11 to work backwards through list of aliveImage
        end
    end
    votesNeeded = math.ceil(numAlive/2)
    if currPlayers ~= numAlive or currVotes ~= numberOfVotes then
        for k,v in pairs(allObjects) do
            if v.getName() == 'Player Distribution Chart' then
                v.call('updatePlayerDist', {num = numAlive})
                v.call('updateAlive', {living = numAlive, withVotes = numberOfVotes, needed = votesNeeded})
            end
        end
    end
    currPlayers = numAlive
    currVotes = numberOfVotes
end

function inTable(input, table)
    for k,v in pairs(table) do
        if input == v then
            return true
        end
    end
    return false
end


------------------Table setup commands
function radius(rad, angle, height)
    return {rad*math.sin(angle*math.pi/180), height, rad*math.cos(angle*math.pi/180)}
end

function resizeTable()
    local obj, tab, pos, rot, colorPos
    local charSheetGuids
    local angleFirst, angleInc
    local zoneSize

    if mode == 'TB' then
        charSheetGuids = CHAR_SHEET_GUIDS_TB
    elseif mode == 'BM' then
        charSheetGuids = CHAR_SHEET_GUIDS_BM
    elseif mode == 'SV' then
        charSheetGuids = CHAR_SHEET_GUIDS_SV
    elseif mode == 'CU' then
        charSheetGuids = CHAR_SHEET_GUIDS_CU
    end

    updatePlayers()
    colors = {}
    angle = {}
    for i = 1, tableSize do
        table.insert(colors, COLORS_ALL[i])
        angle[COLORS_ALL[i]] = 30 + 150/tableSize + (i-1)*300/tableSize
    end
    zoneSize = 2 * 71.5 * math.sin(math.pi / tableSize) * 0.67
    if zoneSize > 40 then
        zoneSize = 40
    end

    if tableSize > 10 and tableSize < 15 then
        UI.setAttribute('sitTable', 'width', 100*(tableSize-10))
        UI.setAttribute('colorSelection', 'height', 150)
    else
        UI.setAttribute('sitTable', 'width', 500)
        UI.setAttribute('colorSelection', 'height', 200)
    end

    for i = 1, 20 do
    	if i <= tableSize then
            obj = getObjectFromGUID(ZONE_GUIDS[COLORS_ALL[i]])
            obj.setScale({zoneSize,10,13})
            obj.setPositionSmooth(radius(71.5,angle[COLORS_ALL[i]], 1))
            obj.setRotationSmooth({0, angle[COLORS_ALL[i]], 0})

            obj = getObjectFromGUID(charSheetGuids[COLORS_ALL[i]])
            if obj then
                obj.setScale({1.64,1,1.64})
                obj.setPositionSmooth(radius(72.5,angle[COLORS_ALL[i]], 1))
                obj.setRotationSmooth({0, angle[COLORS_ALL[i]], 0})
                obj.interactable = true
            end

            if customSet then
                obj = getObjectFromGUID(customBoardGuids[COLORS_ALL[i]])
                if not obj then
                    obj = getObjectFromGUID(customBoardGuids['White']).clone()
                end
                obj.setPosition(radius(72.5,angle[COLORS_ALL[i]], 1))
                obj.setRotation({0, angle[COLORS_ALL[i]], 0})
            end

            obj = getObjectFromGUID(VOTE_PANEL_GUIDS[COLORS_ALL[i]])
            obj.setScale({1.5,0.34,1.5})
            obj.setPositionSmooth(radius(61, angle[COLORS_ALL[i]], 0.8))
            obj.setRotationSmooth({0, angle[COLORS_ALL[i]], 0})

            obj = getObjectFromGUID(VOTEHAND_GUIDS[COLORS_ALL[i]])
            obj.setPositionSmooth(radius(75, angle[COLORS_ALL[i]], -5))
            obj.setRotationSmooth({0, angle[COLORS_ALL[i]], 0})

            obj = getObjectFromGUID(ALIVE_BASE_GUIDS[COLORS_ALL[i]])
            obj.setScale({2.24,1,2.24})
            obj.setPositionSmooth(radius(55, angle[COLORS_ALL[i]], 1))
            obj.setRotationSmooth({0, angle[COLORS_ALL[i]], 0})

            obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[COLORS_ALL[i]])
            if obj then
                obj.setScale({1.82,1,1.82})
                obj.setPositionSmooth(radius(55, angle[COLORS_ALL[i]], 1.16))
                obj.setRotationSmooth({0, angle[COLORS_ALL[i]], 0})
            end

            if i <= 10 then
                Player[COLORS_ALL[i]].setHandTransform({position = radius(82,angle[COLORS_ALL[i]], 1), rotation = {0, angle[COLORS_ALL[i]] + 180, 0}, scale = {14,5,6.5}})
            end

            if i > 10 then
                obj = getObjectFromGUID(TEXT_GUIDS[COLORS_ALL[i]])
                obj.setPosition(radius(83.6,angle[COLORS_ALL[i]], 1))
                obj.setRotation({90, angle[COLORS_ALL[i]], 0})

                obj = getObjectFromGUID(AVATAR_LIGHT_GUIDS[COLORS_ALL[i]])
                obj.setPositionSmooth(radius(81, angle[COLORS_ALL[i]], 6))

                if avatarGuids[COLORS_ALL[i]] then
                    obj = getObjectFromGUID(avatarGuids[COLORS_ALL[i]])
                    obj.setPositionSmooth(radius(84, angle[COLORS_ALL[i]], 6))
                    obj.setRotationSmooth({180, angle[COLORS_ALL[i]], 180})
                end
                UI.setAttribute('select'..COLORS_ALL[i],'active','true')
            end
        else
            break
    	end
    end

    for i = tableSize+1, 20 do
        obj = getObjectFromGUID(ZONE_GUIDS[COLORS_ALL[i]])
        obj.setScale({0.01,0.01,0.01})
        obj.setPositionSmooth({0,-0.1,0})

        obj = getObjectFromGUID(charSheetGuids[COLORS_ALL[i]])
        if obj then
            obj.setScale({0.01,0.01,0.01})
            obj.setPositionSmooth({0,-0.1,0})
            obj.interactable = false
        end

        if customSet then
            obj = getObjectFromGUID(customBoardGuids[COLORS_ALL[i]])
            if obj then
                obj.destruct()
            end
        end

        obj = getObjectFromGUID(VOTE_PANEL_GUIDS[COLORS_ALL[i]])
        obj.setScale({0.01,0.01,0.01})
        obj.setPositionSmooth({0,-0.1,0})

        obj = getObjectFromGUID(VOTEHAND_GUIDS[COLORS_ALL[i]])
        obj.setScale({0.01,0.01,0.01})
        obj.setPositionSmooth({0,-0.1,0})

        obj = getObjectFromGUID(ALIVE_BASE_GUIDS[COLORS_ALL[i]])
        obj.setScale({0.01,0.01,0.01})
        obj.setPositionSmooth({0,-0.1,0})

        obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[COLORS_ALL[i]])
        if obj then
            obj.setLock(true)
            obj.setPositionSmooth({0,-0.1,0})
            obj.setScale({0.01,0.01,0.01})
        end

        if i <= 10 then
            Player[COLORS_ALL[i]].setHandTransform({position = {0,1000,0}, scale = {0,0,0}})
            if Player[COLORS_ALL[i]].seated then
                Player[COLORS_ALL[i]].changeColor('Grey')
            end
        end
        if i > 10 then
            UI.setAttribute('cell'..COLORS_ALL[i],'active','false')
            UI.setAttribute('select'..COLORS_ALL[i],'active','false')
            if players[COLORS_ALL[i]] ~= nil then
                sitUI(players[COLORS_ALL[i]], _, 'sit'..tableSize..COLORS_ALL[i])
            end
            obj = getObjectFromGUID(TEXT_GUIDS[COLORS_ALL[i]])
            obj.setPosition({0,-0.1,0})

            obj = getObjectFromGUID(AVATAR_LIGHT_GUIDS[COLORS_ALL[i]])
            obj.setPositionSmooth({0,-0.1,0})
        end
    end

    createSnapPoints()
    toggleLights({switching = false})
    UI.setAttribute('colorSelection','active',false)
    obj = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    obj.call('updateSettings')
    showExtensionUI()
    Wait.time(updateCustomBoardGuids, 1)
end

function createSnapPoints()
    local snapTable = {}
    local pos, rad
    rad = tableSize * 0.4 + 6

    table.insert(snapTable, {position = {0,0,0}, rotation = {0,180,0}, rotation_snap = true})
    table.insert(snapTable, {position = {-28,0,58}, rotation = {0,0,0}, rotation_snap = true})
    for i = 1,tableSize do
        table.insert(snapTable, {position = radius(55, angle[COLORS_ALL[i]], 1.16), rotation = {0, angle[COLORS_ALL[i]], 0}, rotation_snap = true})
        pos = radius(rad, angle[COLORS_ALL[i]], 1.0)
        pos[3] = pos[3] + 83
        table.insert(snapTable, {position = pos, rotation = {0,0,0}, rotation_snap = true})
    end
    self.setSnapPoints(snapTable)
end

function updateCustomBoardGuids()
    local allObjects = getAllObjects()
    local foundObj

    for k,v in pairs(COLORS_ALL) do
        if inTable(v, colors) then
            colorPos = radius(72.5,angle[v], 1)
            foundObj = false
            for k1,v1 in pairs(allObjects) do
                pos = v1.getPosition()
                if v1.getName() == 'Custom Characters List' and math.abs(pos[1] - colorPos[1]) < 0.1 and math.abs(pos[3] - colorPos[3]) < 0.1 then
                    foundObj = true
                    customBoardGuids[v] = v1.getGUID()
                    if inTable(v, COLORS_EX) then
                        v1.setInvisibleTo({'White','Brown','Red','Orange','Yellow','Green','Teal','Blue','Purple','Pink'})
                    end
                    break
                end
            end
            if not foundObj then
                customBoardGuids[v] = nil
            end
        else
            if customBoardGuids[v] ~= nil then
                obj = getObjectFromGUID(customBoardGuids[v])
                if obj then
                    obj.destruct()
                    customBoardGuids[v] = nil
                end
            end
        end
    end
    toggleLights({switching = false})
end

function setTokenTable()
    local objs, scriptZone
    local posTable = {}
    local rad = tableSize * 0.4 + 6
    local margin = 1.5

    if started then
        for k,v in pairs(colors) do
            posTable[v] = radius(rad, angle[v], 1.0)
            posTable[v][3] = posTable[v][3] + 83
        end
        tokenTable = {}
        scriptZone = getObjectFromGUID(SCRIPTING_ZONE_GUID)
        if scriptZone then
            objs = scriptZone.getObjects()
            for k,v in pairs(colors) do
                tokenTable[v] = {}
                for k1, v1 in pairs(objs) do
                    if math.abs(posTable[v][1] - v1.getPosition()[1]) < margin and math.abs(posTable[v][3] - v1.getPosition()[3]) < margin then
                        table.insert(tokenTable[v], v1)
                    end
                end
            end
        end
    end
end

function moveTokens()
    local objs, pos
    local posTable = {}
    local rad = tableSize * 0.4 + 6

    if started then
        for k,v in pairs(colors) do
            posTable[v] = radius(rad, angle[v], 1.0)
            posTable[v][3] = posTable[v][3] + 83
            if tokenTable[v] ~= nil then
                for k1,v1 in pairs(tokenTable[v]) do
                    pos = v1.getPosition()
                    v1.setPosition({posTable[v][1], pos[2], posTable[v][3]})
                end
            end
        end
    end
end

function shuffleTable(tab)
    local rand
    if tab == nil then
        return nil
    end

    for i = #tab, 1, -1 do
        rand = math.random(1,i)
        tab[i], tab[rand] = tab[rand], tab[i]
    end
    return tab
end

function shufflePlayers()
    if started then
        return
    end
    local colorTab = {}
    local playerTab = {}
    local allPlayers
    for k,v in pairs(COLORS) do
        if players[v] ~= nil then
            table.insert(colorTab, v)
            table.insert(playerTab, players[v].steam_id)
            players[v].changeColor('Grey')
        end
    end
    for k,v in pairs(COLORS_EX) do
        if players[v] ~= nil then
            table.insert(colorTab, v)
            table.insert(playerTab, players[v].steam_id)
            sitUI(players[v], _, 'sit'..tableSize..v)
        end
    end
    if playerTab == nil then
        return
    end
    playerTab = shuffleTable(playerTab)
    allPlayers = Player.getPlayers()

    for k,v in pairs(colorTab) do
        for k1,v1 in pairs(allPlayers) do
            if v1.steam_id == playerTab[k] then
                if inTable(v, COLORS) then
                    v1.changeColor(v)
                else
                    sitUI(v1, _, 'sit'..tableSize..v)
                end
                break
                print('found')
            end
        end
    end
end

function toggleLights(params)
    local switching = params.switching
    local obj

    if switching then
        lights = not lights
    end
    if not lights then
        Lighting.ambient_type = 1
        Lighting.ambient_intensity = 1.3
        Lighting.light_intensity = 0.54
        Lighting.apply()
        for k,v in pairs(NIGHT_LIGHT_GUIDS) do
            obj = getObjectFromGUID(v)
            obj.setPosition({0,-0.1,0})
            obj.call('powerOff')
        end
    else
        Lighting.ambient_type = 1
        Lighting.ambient_intensity = 1.5
        Lighting.light_intensity = 0
        Lighting.apply()
        obj = getObjectFromGUID(NIGHT_LIGHT_GUIDS.Table)
        obj.setPosition({0,40,0})
        obj.call('powerOn')
        obj = getObjectFromGUID(NIGHT_LIGHT_GUIDS.Black)
        obj.setPosition({0,10,83})
        obj.call('powerOn')

        for i = 1, tableSize do
            obj = getObjectFromGUID(NIGHT_LIGHT_GUIDS[COLORS_ALL[i]])
            if obj then
                obj.setPosition(radius(73.5,angle[COLORS_ALL[i]], 5))
                if customSet then
                    obj.call('powerOff')
                else
                    obj.call('powerOn')
                end
            end
        end

        for i = tableSize+1, 20 do
            obj = getObjectFromGUID(NIGHT_LIGHT_GUIDS[COLORS_ALL[i]])
            if obj then
                obj.setPosition({0,-0.1,0})
                obj.call('powerOff')
            end
        end
    end
end


------------------Object Calls
function getNumPlayers()
    local numPlayers = 0
    for k,v in pairs(COLORS_ALL) do
        if players[v] ~= nil then
            numPlayers = numPlayers + 1
        end
    end
    return numPlayers
end

function toggleLockAliveAndVoteTokens(locking)
    for i=1,20 do
        if aliveTokens[COLORS_ALL[i]].object ~= 0 then
            aliveTokens[COLORS_ALL[i]].object.setLock(locking)
            if aliveTokens[COLORS_ALL[i]].vote ~= 0 then
                aliveTokens[COLORS_ALL[i]].vote.setLock(locking)
            end
        end
    end
end


------------------Events
function onPlayerChangeColor(color)
    if inTable(color, COLORS) and not inTable(color, colors) then
        Player[color].changeColor('Grey')
    else
        local obj = getObjectFromGUID(TEAM_TOOL_GUID)
        if obj then
            obj.call('refreshUI')
        else
            updatePlayers()
        end
    end
end

function onPlayerConnect(player)
    Wait.stop(timerID)
    timerID = Wait.time(function ()
        obj = getObjectFromGUID(TEAM_TOOL_GUID)
        if obj then
            obj.reload()
        end
    end, 60)
end

function onPlayerDisconnect(color)
    local obj = getObjectFromGUID(TEAM_TOOL_GUID)
    if obj then
        obj.call('refreshUI')
    else
        updatePlayers()
    end
end

------------------Chat commands
function onChat(message, player)
    local args = {} -- The arguments following a command
    local command, msg, len

    for v in string.gmatch(message, "%S+") do
            args[#args + 1] = v
    end

    if args[1] ~= nil then
        command = string.lower(args[1])
        len = string.len(command)
        msg = string.sub(message, len + 2)
    end

    if command == 'c' then
        player.print(HELP_MESSAGE)
        return false
    elseif command == 'h' then
        player.print(history)
        return false
    elseif command == 'r' then
        updatePlayers()
        local char, charOut
        for k,v in pairs(players) do
            if v.steam_id == player.steam_id then
                char = chars[k]
                if char == nil then
                    player.print('You do not have a character.')
                    return false
                else
                    charOut = string.gsub(char, ' ', '_')
                    player.print('Your character is ' .. char .. '!')
                    player.print(char .. ' - ' .. CHARACTERS[charOut].Description)
                    return false
                end
            end
        end
        player.print('You do not have a char.')
        return false
    elseif command == 'v' then
        player.print('Version ' .. VERSION)
        return false
    elseif command == '.white' then
        if player.color == 'Black' or DEBUG then
            chatMessage('White', msg)
        end
        return false
    elseif command == '.brown' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Brown', msg)
        end
        return false
    elseif command == '.red' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Red', msg)
        end
        return false
    elseif command == '.orange' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Orange', msg)
        end
        return false
    elseif command == '.yellow' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Yellow', msg)
        end
        return false
    elseif command == '.green' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Green', msg)
        end
        return false
    elseif command == '.teal' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Teal', msg)
        end
        return false
    elseif command == '.blue' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Blue', msg)
        end
        return false
    elseif command == '.purple' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Purple', msg)
        end
        return false
    elseif command == '.pink' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Pink', msg)
        end
        return false
    elseif command == '.magenta' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Magenta', msg)
        end
        return false
    elseif command == '.lavender' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Lavender', msg)
        end
        return false
    elseif command == '.navy' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Navy', msg)
        end
        return false
    elseif command == '.cyan' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Cyan', msg)
        end
        return false
    elseif command == '.mint' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Mint', msg)
        end
        return false
    elseif command == '.lime' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Lime', msg)
        end
        return false
    elseif command == '.peach' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Peach', msg)
        end
        return false
    elseif command == '.coral' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Coral', msg)
        end
        return false
    elseif command == '.maroon' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Maroon', msg)
        end
        return false
    elseif command == '.silver' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Silver', msg)
        end
        return false
    elseif command == '.move' then
        if player.color == 'Black' or player.admin or DEBUG then
            chatMove(args[2], args[3], player)
            return false
        end
    elseif command == '.remove' then
        if player.color == 'Black' or player.admin or DEBUG then
            chatRemove(args[2], player)
            return false
        end
    elseif command == '.swap' then
        if player.color == 'Black' or player.admin or DEBUG then
            chatSwap(args[2], args[3], player)
            return false
        end
    elseif command == 'debug' and DEBUG then
        return false
    elseif command == 'look' and DEBUG then
        chatLook(args[2], player)
        return false
    end

    for k,v in pairs(COLORS_EX) do
        if playersExIds[v] == player.steam_id then
            printToAll(COLORS_BBC[v] .. player.steam_name .. ':[-] ' .. message)
            return false
        end
    end
end

function chatMessage(color, message)
    if message == nil then
        return
    end
    updatePlayers()
    local player = players[color]
    if player ~= nil then
        local msg = COLORS_BBC[color] .. '<' .. color .. '>[-] [000000]' .. Player['Black'].steam_name .. ':[-] ' .. message
        player.print(msg)
        Player['Black'].print(msg)
    else
        Player['Black'].print('No one is playing as ' .. color .. '.', {1,0,0})
    end
end

function chatMove(playerName, seatColor, player, swap)
    if playerName == nil or seatColor == nil then
        return
    end

    local playerFound = false
    local playerColor = nil
    local colorFound = false
    local playerList = Player.getPlayers()
    local token, pos, rad, tempChar

    for k,v in pairs(COLORS_ALL) do
        if string.match(string.lower(v), string.lower(seatColor)) then
            colorFound = v
            break
        end
    end
    if string.match('black', string.lower(seatColor)) then
        colorFound = 'Black'
    end

    if string.match('grey', string.lower(seatColor)) then
        colorFound = 'Grey'
    end
    if not colorFound then
        player.print('Error: Could not move player: invalid color.', {1,0,0})
        return
    end

    if not inTable(colorFound, colors) then
        return
    end

    for k,v in pairs(playerList) do
        if string.match(string.lower(v.steam_name), string.lower(playerName)) then
            playerFound = v
        end
    end
    if not playerFound then
        player.print('Error: Could not move player: player not found.', {1,0,0})
        return
    end

    updatePlayers()
    if colorFound ~= 'Grey' and players[colorFound] ~= nil then
        player.print('Error: Could not move player: seat is already taken.', {1,0,0})
        return
    end

    for k,v in pairs(colors) do
        if players[v] ~= nil and players[v].steam_id == playerFound.steam_id then
            playerColor = v
        end
    end

    for k,v in pairs(playersExIds) do
        if playerFound.steam_id == v then
            sitUI(playerFound, _, 'sit'..tableSize..k)
        end
    end
    playerFound.changeColor('Grey')

    if started and playerColor ~= nil and swap then
        rad = tableSize * 0.4 + 6
        for k,v in pairs(getAllObjects()) do
            if v.getDescription() == chars[playerColor] then
                token = v
                v.setColorTint(COLORS_RGB[colorFound])
                pos = radius(rad, angle[colorFound], 1.0)
                pos[3] = pos[3] + 83
                token.setPositionSmooth(pos)
            elseif chars[colorFound] ~= nil and v.getDescription() == chars[colorFound] then
                token = v
                v.setColorTint(COLORS_RGB[playerColor])
                pos = radius(rad, angle[playerColor], 1.0)
                pos[3] = pos[3] + 83
                token.setPositionSmooth(pos)
            end
        end

        tempChar = chars[colorFound]
        chars[colorFound] = chars[playerColor]
        chars[playerColor] = tempChar
        obj = getObjectFromGUID(NIGHT_HELPER_GUID)
        if obj then
            obj.call('swapColors', {color1 = playerColor, color2 = colorFound})
        end
    end

    if colorFound == 'Grey' or colorFound == 'Black' or (inTable(colorFound, COLORS) and not Player[colorFound].seated) then
        playerFound.changeColor(colorFound)
    elseif inTable(colorFound, COLORS_EX) and players[colorFound] == nil then
        playerFound.changeColor('Grey')
        sitUI(playerFound, _, 'sit'..tableSize..colorFound)
    end
    player.print(playerFound.steam_name .. ' has been moved to ' .. colorFound .. '.')
    refreshUI()
end

function chatRemove(seatColor, player)
    if seatColor == nil then
        return
    end

    local colorFound = false
    for k,v in pairs(COLORS_ALL) do
        if string.match(string.lower(v), string.lower(seatColor)) then
            colorFound = v
            break
        end
    end
    if string.match('black', string.lower(seatColor)) then
        colorFound = 'Black'
    end

    if not colorFound then
        player.print('Error: Invalid color.', {1,0,0})
        return
    end

    updatePlayers()
    if players[colorFound] ~= nil then
        player.print(players[colorFound].steam_name .. ' has been moved to Grey.')
        if inTable(colorFound, COLORS) or colorFound == 'Black' then
            players[colorFound].changeColor('Grey')
        else
            sitUI(players[colorFound], _, 'sit'..tableSize..colorFound)
        end
    else
        player.print('Error: Could not remove player: seat is empty.', {1,0,0})
    end
end

function chatSwap(seatColor1, seatColor2, player)
    local color1, color2, tempChar
    local player1id, player2id
    local pos1, pos2, token1, token2
    local obj

    color1 = false
    for k,v in pairs(COLORS_ALL) do
        if string.match(string.lower(v), string.lower(seatColor1)) then
            color1 = v
            break
        end
    end

    color2 = false
    for k,v in pairs(COLORS_ALL) do
        if string.match(string.lower(v), string.lower(seatColor2)) then
            color2 = v
            break
        end
    end

    if not color1 then
        player.print('Error: The first color you entered is not a color.', {1,0,0})
        return
    end

    if not color2 then
        player.print('Error: The second color you entered is not a color.', {1,0,0})
        return
    end

    updatePlayers()
    if players[color1] == nil and players[color2] == nil then
        player.print('Error: No players seated in those colors.', {1,0,0})
        return
    end

    if players[color1] == nil then
        hideUI()
        Wait.time(function () chatMove(players[color2].steam_name, color1, player, true) end, 0.1)
        return
    elseif players[color2] == nil then
        hideUI()
        Wait.time(function () chatMove(players[color1].steam_name, color2, player, true) end, 0.1)
        return
    end

    player1id = players[color1].steam_id
    player2id = players[color2].steam_id

    if inTable(color1, COLORS) then
        players[color1].changeColor('Grey')
    else
        sitUI(players[color1], _, 'sit'..tableSize..color1)
    end

    if inTable(color2, COLORS) then
        players[color2].changeColor('Grey')
    else
        sitUI(players[color2], _, 'sit'..tableSize..color2)
    end

    if started then
        for k,v in pairs(getAllObjects()) do
            if v.getDescription() == chars[color1] then
                token1 = v
                pos1 = v.getPosition()
                v.setColorTint(COLORS_RGB[color2])
            elseif v.getDescription() == chars[color2] then
                token2 = v
                pos2 = v.getPosition()
                v.setColorTint(COLORS_RGB[color1])
            end
        end
        token1.setPositionSmooth(pos2)
        token2.setPositionSmooth(pos1)
        tempChar = chars[color1]
        chars[color1] = chars[color2]
        chars[color2] = tempChar

        obj = getObjectFromGUID(NIGHT_HELPER_GUID)
        if obj then
            obj.call('swapColors', {color1 = color1, color2 = color2})
        end
    end

    for k,v in pairs(Player.getPlayers()) do
        if v.steam_id == player2id then
            player.print(v.steam_name .. ' has been moved to ' .. color1 .. '.')
            if inTable(color1, COLORS) then
                v.changeColor(color1)
            elseif inTable(color1, COLORS_EX) then
                sitUI(v, _, 'sit'..tableSize..color1)
            end
            break
        end
    end

    for k,v in pairs(Player.getPlayers()) do
        if v.steam_id == player1id then
            player.print(v.steam_name .. ' has been moved to ' .. color2 .. '.')
            if inTable(color2, COLORS) then
                v.changeColor(color2)
            elseif inTable(color2, COLORS_EX) then
                sitUI(v, _, 'sit'..tableSize..color2)
            end
            break
        end
    end
end

function chatLook(objectGUID, player)
    local obj = getObjectFromGUID(objectGUID)
    if obj then
        local pos = obj.getPosition()
        player.lookAt({position = pos, pitch = 90, yaw = 180, distance = 5})
    end
end


------------------Functions called when game starts
function refreshUI()
    for k, v in pairs(COLORS) do
        UI.setAttribute('player' .. v, 'visibility', v)
        if chars[v] then
            UI.setValue('player' .. v, 'Your character is ' .. chars[v] .. '!')
        else
            UI.setValue('player' .. v, '')
        end
    end
end

function hideUI()
    for k, v in pairs(COLORS) do
        UI.setAttribute('player' .. v, 'visibility', v)
        UI.setValue('player' .. v, '')
    end
end

function checkSeatedPlayers()
    local obj
    local allPlayers = Player.getPlayers()
    if DEBUG or #allPlayers == 1 then
        return
    end
    updatePlayers()
    for k,v in pairs(COLORS) do
        if not Player[v].seated then
            obj = getObjectFromGUID(ZONE_GUIDS[v])
            obj.setValue('Grey')
            obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
            obj.destruct()
        end
    end
    for k,v in pairs(COLORS_EX) do
        if players[v] == nil then
            obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
            if obj then
                obj.destruct()
            end
            obj = getObjectFromGUID(ZONE_GUIDS[v])
            if obj then
                obj.setColorTint({0.69,0.69,0.69,0.25})
            end
        end
    end
end

function unlockAliveTokens()
    for k,v in pairs(ALIVE_TOKEN_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = true
        end
    end
    for k,v in pairs(colors) do
        obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
        if obj then
            obj.setLock(false)
        end
    end
end


------------------Voting functions
function vote(params)
    local voter = params.voter
    local handObj = getObjectFromGUID(VOTEHAND_GUIDS[voter])
    if not voteLock[voter] then
        if voted[voter] then
            voted[voter] = false
            params.index = 1
            params.color = {1,1,1}
            params.font_color = {0,0,0}
            getObjectFromGUID(VOTE_PANEL_GUIDS[voter]).editButton(params)
            handObj.setScale(VOTEHAND_HIDE_SCALE)
            handObj.setPosition(radius(75, angle[voter], -5))
        else
            voted[voter] = true
            params.index = 1
            params.color = {236/255,229/255,44/255}
            params.font_color = {1,1,1}
            getObjectFromGUID(VOTE_PANEL_GUIDS[voter]).editButton(params)
            handObj.setScale(VOTEHAND_SHOW_SCALE)
            handObj.setPositionSmooth(radius(45, angle[voter], 5))
        end
    end
end

function setVoteLock(params)
    voteLock[params.color] = true
end

function nominate(params)
    local nominator = params.nominator
    local params = {}
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    if canNominate[nominator] == false then
        return
    end

    if currentNominator == '' then
        currentNominator = nominator
        params.index = 2
        params.color = {0,0,1}
        params.font_color = {1,1,1}
        getObjectFromGUID(VOTE_PANEL_GUIDS[nominator]).editButton(params)
        clockControls.call('pointHand', {handGUID = BLUE_HAND_GUID, color = nominator})
        UI.setAttribute('colorSelection','active','false')
        colorTable = false
    elseif currentNominator == nominator then
        currentNominator = ''
        params.index = 2
        params.color = {1,1,1}
        params.font_color = {0,0,1}
        getObjectFromGUID(VOTE_PANEL_GUIDS[nominator]).editButton(params)
        clockControls.call('pointHand', {handGUID = BLUE_HAND_GUID, color = 'None'})
        if currentNominated ~= '' then
            params.index = 0
            params.color = {1,1,1}
            params.font_color = {1,0,0}
            getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominated]).editButton(params)
            currentNominated = ''
            clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = 'None'})
            clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = 'None'})
        end
        UI.setAttribute('colorSelection','active','false')
        colorTable = false
    else
        updatePlayers()
        if players[v] ~= nil then
            players[v].print(currentNominator .. ' is currently in the process of nominating a player. Please wait.', {1,0,0})
        end
    end
end

function nominated(params)
    local player = params.player
    local target = params.target
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    local buttonParams = {}

    if (player == currentNominator or player == 'Black') and canBeNominated[target] then
        if currentNominated == '' then
            currentNominated = target
            buttonParams.index = 0
            buttonParams.color = {1,0,0}
            buttonParams.font_color = {1,1,1}
            getObjectFromGUID(VOTE_PANEL_GUIDS[target]).editButton(buttonParams)
            clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = target})
            clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = target})
        elseif currentNominated == target then
            currentNominated = ''
            buttonParams.index = 0
            buttonParams.color = {1,1,1}
            buttonParams.font_color = {1,0,0}
            getObjectFromGUID(VOTE_PANEL_GUIDS[target]).editButton(buttonParams)
            clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = 'None'})
            clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = 'None'})
        else
            buttonParams.index = 0
            buttonParams.color = {1,1,1}
            buttonParams.font_color = {1,0,0}
            getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominated]).editButton(buttonParams)
            currentNominated = target
            buttonParams.color = {1,0,0}
            buttonParams.font_color = {1,1,1}
            getObjectFromGUID(VOTE_PANEL_GUIDS[target]).editButton(buttonParams)
            clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = target})
            clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = target})
        end
    end
end

function resetCurrentNominations()
    local buttonParams = {}
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)

    if currentNominator ~= '' and canNominate[currentNominator] == true then
        buttonParams.index = 2
        buttonParams.color = {1,1,1}
        buttonParams.font_color = {0,0,1}
        getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominator]).editButton(buttonParams)
    end
    if currentNominated ~= '' and canBeNominated[currentNominated] == true then
        buttonParams.index = 0
        buttonParams.color = {1,1,1}
        buttonParams.font_color = {1,0,0}
        getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominated]).editButton(buttonParams)
    end
    currentNominator = ''
    currentNominated = ''
    clockControls.call('pointHand', {handGUID = BLUE_HAND_GUID, color = 'None'})
    clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = 'None'})
    clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = 'None'})
end

function checkLiving()
    for k,v in pairs(COLORS_ALL) do
        if aliveTokens[v].object ~= 0 then
            if aliveTokens[v].object.is_face_down == true then -- if life token is face down...
                living[v] = false
                if aliveTokens[v].vote ~= 0 then -- ..then if a vote token is present
                    hasVote[v] = true
                else
                    hasVote[v] = false
                end
            else
                hasVote[v] = true
                living[v] = true
            end
        end
    end
end

function hideVoteButtons()
    local votePanel
    for k,v in pairs(VOTE_PANEL_GUIDS) do
        votePanel = getObjectFromGUID(v)
        votePanel.clearButtons()
    end
    for k,v in pairs(COLORS_ALL) do
        voteButtonsOn[v] = false
    end
end

function showVoteButtons(params)
    local voteMode = params.voteMode
    local votePanel
    local buttonParams = {}
    currentNominator = ''
    currentNominated = ''
    checkLiving()
    updatePlayers()
    for k,v in pairs(COLORS_ALL) do
        if aliveTokens[v].object ~= 0 then
            votePanel = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
            votePanel.call('createButtons')
            voteButtonsOn[v] = true
            canNominate[v] = true
            canBeNominated[v] = true
            voted[v] = false

            if voteMode == 'execution' then
                if not living[v] then
                    buttonParams.color = {0,0,0}
                    buttonParams.font_color = {0,0,0}
                    buttonParams.index = 2
                    getObjectFromGUID(VOTE_PANEL_GUIDS[v]).editButton(buttonParams)
                    canNominate[v] = false
                end
                if not hasVote[v] then
                    buttonParams.color = {0,0,0}
                    buttonParams.font_color = {0,0,0}
                    buttonParams.index = 1
                    getObjectFromGUID(VOTE_PANEL_GUIDS[v]).editButton(buttonParams)
                end
            end
        else
            voteButtonsOn[v] = false
        end
    end
end

function updateVoteResults(params)
    local vM = params.voteMode
    local numVotes = 0
    local nominationString = '[888888]Nomination: ' .. COLORS_BBC[currentNominator] .. currentNominator .. ' [888888]> ' .. COLORS_BBC[currentNominated] .. currentNominated .. '[-]\n'
    local voterString = '[888888]Voters:[-]'
    local actionStr

    if vM == 'execution' then
        actionStr = 'execute'
    else
        actionStr = 'exile'
    end

    for k,v in pairs(COLORS_ALL) do
        if voted[v] then
            numVotes = numVotes + 1
            voterString = voterString .. ' ' .. COLORS_BBC[v] .. v .. '[-]'
        end
    end
    if numVotes == 1 then
        broadcastToAll('Votes are in! '.. numVotes ..' player voted to '.. actionStr .. ' ' .. currentNominated ..'!', {1,0,0})
    else
        broadcastToAll('Votes are in! '.. numVotes ..' players voted to '.. actionStr .. ' ' .. currentNominated ..'!', {1,0,0})
    end
    if numVotes == 0 then
        voterString = '[888888]Voters: None[-]'
    end
    broadcastToAll(voterString, {1,1,1})
    history = history .. '\n' .. nominationString .. voterString .. '\n'
    notes = nominationString .. voterString
    setNotes(notes)

    updateNominations()
    resetVotes({voteMode = vM})
end

function updateNominations()
    canNominate[currentNominator] = false
    canBeNominated[currentNominated] = false
    local buttonParams = {}
    buttonParams.color = {0,0,0}
    buttonParams.font_color = {0,0,0}
    buttonParams.index = 2
    if currentNominator ~= '' then
        getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominator]).editButton(buttonParams)
    end
    buttonParams.index = 0
    if currentNominated ~= '' then
        getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominated]).editButton(buttonParams)
    end
    currentNominator = ''
    currentNominated = ''
    for k,v in pairs(COLORS_ALL) do
        if voted[v] and not living[v] then
            hasVote[v] = false
        end
    end
end

function resetVotes(params)
    local buttonParams = {}
    local handObj
    for k,v in pairs(colors) do
        if players[v] ~= nil and voteButtonsOn[v] then
            if hasVote[v] or params.voteMode == 'exile' then
                buttonParams.color = {1,1,1}
                buttonParams.font_color = {0,0,0}
                buttonParams.index = 1
                getObjectFromGUID(VOTE_PANEL_GUIDS[v]).editButton(buttonParams)
                voteLock[v] = false
            else
                buttonParams.color = {0,0,0}
                buttonParams.font_color = {0,0,0}
                buttonParams.index = 1
                getObjectFromGUID(VOTE_PANEL_GUIDS[v]).editButton(buttonParams)
                voteLock[v] = true
            end
        else
            voteLock[v] = false
        end
        voted[v] = false
    end
    hideVotehands()
end

function hideVotehands()
    local handObj
    for k,v in pairs(colors) do
        handObj = getObjectFromGUID(VOTEHAND_GUIDS[v])
        handObj.setScale(VOTEHAND_HIDE_SCALE)
        handObj.setPosition(radius(75, angle[v], -5))
    end
end


------------------Grey UI
function showExtensionUI()
    UI.setAttribute('placeDecalTB', 'active', 'false')
    UI.setAttribute('placeDecalBM', 'active', 'false')
    UI.setAttribute('placeDecalSV', 'active', 'false')
    UI.setAttribute('placeDecalCU', 'active', 'false')
    UI.setAttribute('placeDecal'.. mode, 'active', 'true')
    UI.setAttribute('decalText', 'active', 'true')
    UI.setAttribute('blackShowMsg', 'active', 'false')
    for i = 11,20 do
        UI.setAttribute('sitTable'..i, 'active', 'false')
        UI.setAttribute('colorMsgDropdown'..i, 'active', 'false')
    end
    if tableSize <= 10 then
        UI.setAttribute('teamMenu', 'active', 'false')
        UI.setAttribute('leaveTeam', 'active', 'false')
        UI.setAttribute('blackMessage', 'active', 'false')
        UI.setAttribute('placeDecal'.. mode, 'visibility', 'White|Brown|Red|Orange|Yellow|Green|Teal|Blue|Purple|Pink')
        UI.setAttribute('decalText', 'visibility', 'White|Brown|Red|Orange|Yellow|Green|Teal|Blue|Purple|Pink')
    else
        UI.setAttribute('teamMenu', 'active', 'true')
        UI.setAttribute('leaveTeam', 'active', 'true')
        UI.setAttribute('blackMessage', 'active', 'true')
        UI.setAttribute('colorMsgDropdown'..tableSize, 'active', 'true')
        UI.setAttribute('placeDecal'.. mode, 'visibility', 'White|Brown|Red|Orange|Yellow|Green|Teal|Blue|Purple|Pink|Grey')
        UI.setAttribute('decalText', 'visibility', 'White|Brown|Red|Orange|Yellow|Green|Teal|Blue|Purple|Pink|Grey')
        UI.setAttribute('sitTable'..tableSize, 'active', 'true')
    end
end

function sitUI(player, value, id)
    local textObj, obj, zoneObj
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    local seatLock = clockControls.getVar('seatLock')
    local color = string.sub(id, 6, #id)
    updatePlayers()
    if playersEx[color] == nil then
        for k,v in pairs(playersEx) do
            if v ~= nil and v.steam_id == player.steam_id then
                player.print('You are already sitting in a seat.')
                return
            end
        end
        if seatLock then
            player.print('Extension seats are locked.')
            return
        end
        player.print('You are now sitting in ' .. color .. '.')
        playersExIds[color] = player.steam_id
        playersEx[color] = player
        textObj = getObjectFromGUID(TEXT_GUIDS[color])
        textObj.setValue(player.steam_name)
        generateAvatar(color)
        printToAll(COLORS_BBC[color] .. player.steam_name .. ' is color ' .. color .. '.[-]')
        for i = 11,20 do
            UI.setAttribute('sit' .. i .. color, 'text', 'Leave ' .. color)
            UI.setAttribute(id, 'textColor', '#FFFFFF')
        end
        zoneObj = getObjectFromGUID(ZONE_GUIDS[color])
        zoneObj.setColorTint(FAKE_ZONE_RGB[color])
    else
        if player.steam_id == playersEx[color].steam_id then
            player.print('You are no longer sitting in ' .. color .. '.')
            for i = 11,20 do
                UI.setAttribute('sit' .. i .. color, 'text', 'Sit in ' .. color)
                UI.setAttribute(id, 'textColor', '#FFFFFF')
            end
            playersEx[color] = nil
            playersExIds[color] = nil
            textObj = getObjectFromGUID(TEXT_GUIDS[color])
            textObj.setValue(' ')
            deleteAvatar(color)
            if started then
                zoneObj = getObjectFromGUID(ZONE_GUIDS[color])
                zoneObj.setColorTint({0.69,0.69,0.69,0.25})
            end
        else
            player.print('Someone is already sitting in ' .. color .. '.')
        end
    end
    obj = getObjectFromGUID(TEAM_TOOL_GUID)
    if obj then
        obj.call('refreshUI')
    end
end

function generateAvatar(color)
    local objParam = {
        type = "Custom_Model",
        position = radius(84, angle[color], 6),
        rotation = {180, angle[color], 180},
        scale = {2.5, 2.5, 2.5},
        callback = "avatarCallback",
        sound = false
    }
    local obj
    if avatarGuids[color] then
        obj = getObjectFromGUID(avatarGuids[color])
        obj.destruct()
    end
    generateAvatarImageUrl(playersEx[color].steam_id)
    Wait.time(function()
        local avatar = spawnObject(objParam)
        avatar.setLock(true)
        avatar.setDescription(color .. " Avatar")
        avatar.interactable = false
        local customParam = {
            diffuse = avatarUrl,
            mesh = "http://cloud-3.steamusercontent.com/ugc/933813375177509684/900B7683E01C43C394C408BC38E034B305F1B3AA/",
            collider = "http://cloud-3.steamusercontent.com/ugc/487893695356616224/E3E39A827C062914E4185D8757A81D4D14892B8B/",
            type = 0,
            material = 3,
            cast_shadows = false
        }
        avatar.setCustomObject(customParam)
        light = getObjectFromGUID(AVATAR_LIGHT_GUIDS[color])
        light.call('powerOn')
    end, 0.5)
end

function avatarCallback(objIn, paramsIn)
	local color = string.gsub(objIn.getDescription(), " Avatar", "")
	avatarGuids[color] = objIn.getGUID()
end

function generateAvatarImageUrl(steamId)
    local url = 'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=E05421C6A86CAABADE2F700F492FFA4A&steamids=' .. steamId
    WebRequest.get(url, self, 'avatarUrlCB')
end

function avatarUrlCB(req)
    if req.is_done and not req.is_error then
        local response = JSON.decode(req.text)
        avatarUrl = response.response.players[1].avatarfull
    end
end

function deleteAvatar(color)
    if avatarGuids[color] then
        obj = getObjectFromGUID(avatarGuids[color])
        obj.destruct()
        avatarGuids[color] = nil
        light = getObjectFromGUID(AVATAR_LIGHT_GUIDS[color])
        light.call('powerOff')
    end
end

function colorSelectUI(player, value, id)
	uiColor[tableSize] = value
end

function voteUI(player, value, id)
    local found = false
    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end
    if not found then
        return
    end
    local clock = getObjectFromGUID(CLOCK_GUID)
    local scale = clock.getScale()
    if scale.x == 0 then
        return
    end

    local callParams = {}
    callParams.voter = found
    vote(callParams)
end

function nominatedDropdown(player, value, id)
    local found = false
    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end

    if not found or found ~= currentNominator then
        return
    end

	if (colorTable) then --colorSelection is visible
		UI.setAttribute('colorSelection','active','false')
		colorTable = false
	else --colorSelection is NOT visible
		UI.setAttribute('colorSelection','active','true')
		colorTable = true
	end
end

function nominateUI(player, value, id)
    local found = false
    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end
    if not found then
        return
    end
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    local rotating = clockControls.getVar('rotating')
    if rotating then
        return
    end

    local callParams = {}
    callParams.nominator = found
    nominate(callParams)
end

function nominatedUI(player, value, id)
    local found = false
    local target = UI.getAttribute(id, 'text')

    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end

    if not found then
        return
    end
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    local rotating = clockControls.getVar('rotating')
    if rotating then
        return
    end
    updatePlayers()
    if players[target] == nil or found ~= currentNominator then
        return
    end
    local callParams = {}
    callParams.player = found
    callParams.target = target
    nominated(callParams)
    UI.setAttribute('colorSelection','active','false')
    colorTable = false
end

function joinTeamUI(player, value, id)
    local found = false
    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end
    if not found then
        return
    end
    local teamTool = getObjectFromGUID(TEAM_TOOL_GUID)
    local params = {color = found, team = id}
    teamTool.call('joinTeamUI', params)
end

function leaveTeamUI(player, value, id)
    local teamTool = getObjectFromGUID(TEAM_TOOL_GUID)
    local jokersDefault = teamTool.getVar('jokersDefault')
    local defaultTeam

    if jokersDefault then
        defaultTeam = 'Jokers'
    else
        defaultTeam = 'None'
    end

    if player.team ~= defaultTeam then
        player.team = defaultTeam
        local teamTool = getObjectFromGUID(TEAM_TOOL_GUID)
        teamTool.call('refreshUI')
    end
end

function messageInputUI(player, value, id)
    uiMsg = value
end

function showMessageUI(player, value, id)
    UI.setAttribute('blackShowMsg', 'active', 'false')
    UI.setAttribute('blackMessage', 'active', 'true')
end

function hideMessageUI(player, value, id)
    UI.setAttribute('blackMessage', 'active', 'false')
    UI.setAttribute('blackShowMsg', 'active', 'true')
end

function sendMessageUI(blackPlayer, value, id)
    if not inTable(uiColor[tableSize], COLORS_EX) then
        return
    end

    updatePlayers()
    local player = players[uiColor[tableSize]]
    if player ~= nil then
        local msg = COLORS_BBC[uiColor[tableSize]] .. '<' .. uiColor[tableSize] .. '>[-] [000000]' .. blackPlayer.steam_name .. ':[-] ' .. uiMsg
        player.print(msg)
        blackPlayer.print(msg)
    else
        blackPlayer.print('No one is playing as ' .. uiColor[tableSize] .. '.', {1,0,0})
    end
end

function decalUI(player, value, id)
    updatePlayers()
    local found = false
    local params = {}
    local tableObj = getObjectFromGUID('8e1176')
    for k,v in pairs(players) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end
    if not found then
        return
    end
    local globalDecals = Global.getDecals()
    local decalTab

    if globalDecals ~= nil then
        for i = #globalDecals,1,-1 do
            if math.abs(globalDecals[i].position[1] - radius(45, angle[found], 1.1)[1]) < 0.01 and math.abs(globalDecals[i].position[3] - radius(45, angle[found], 1.1)[3]) < 0.01 then
                table.remove(globalDecals,i)
            end
        end
        Global.setDecals({})
        decalTab = Global.getDecals()
        while decalTab ~= nil do
            Global.setDecals({})
            decalTab = Global.getDecals()
        end
        Global.setDecals(globalDecals)
    end
    if value ~= "None" then
        params.name = value
        params.url = DECAL_URLS[value]
        params.position = radius(45, angle[found], 1.1)
        params.rotation = {90, angle[found] - 180, 0}
        params.scale = {8,8,8}
        Global.addDecal(params)
    end
end
