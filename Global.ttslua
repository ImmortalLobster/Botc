--[[
Blood in the Clocktower Scripted
Made by Unreal_ed, modified by Sionar
UI code borrowed from Lost Savage and SilentxDream
--]]


------------------Constants
MOD_NAME = 'Blood on the Clocktower'
VERSION = '15.1.1'
DEBUG = false
START_MESSAGE = 'Blood on the Clocktower\n Version [00FF00]' .. VERSION .. '[-]\nMade by [49D5FD]Sionar[-]\n\n[89C381]Player chat commands:[-]\n[967BB6]c[-] : See the list of chat commands.\n[967BB6]h[-] : Show the vote history.\n[967BB6]r[-] : show your role.\n[967BB6]v[-] : Show the version number.\n\n[89C381]Storyteller commands:[-]\n[967BB6].move[-] [B8F161]player[-] [E29A8A]color[-] : Move a player to a color.\n[967BB6].remove[-] [E29A8A]color[-] : Move a color to Grey.\n[967BB6].swap[-] [E29A8A]color[-] [E29A8A]color[-]: Swap two colors + roles.\n[FF007F].Magenta[-] [967BB6].Lavender[-] [616BD4].Navy[-] [49D5FD].Cyan[-] [89C381].Mint[-]\n[B8F161].Lime[-] [F1D4A2].Peach[-] [E29A8A].Coral[-] [800000].Maroon[-] [BEBEBE].Silver[-]:\nPrivately message those players.'
HELP_MESSAGE = '[89C381]Player chat commands:[-]\n[967BB6]c[-] : See the list of chat commands.\n[967BB6]h[-] : Show the vote history.\n[967BB6]r[-] : show your role.\n[967BB6]v[-] : Show the version number.\n\n[89C381]Storyteller commands:[-]\n[967BB6].move[-] [B8F161]player[-] [E29A8A]color[-] : Move a player to a color.\n[967BB6].remove[-] [E29A8A]color[-] : Move a color to Grey.\n[967BB6].swap[-] [E29A8A]color[-] [E29A8A]color[-]: Swap two colors + roles.\n[FF007F].Magenta[-] [967BB6].Lavender[-] [616BD4].Navy[-] [49D5FD].Cyan[-] [89C381].Mint[-]\n[B8F161].Lime[-] [F1D4A2].Peach[-] [E29A8A].Coral[-] [800000].Maroon[-] [BEBEBE].Silver[-]:\nPrivately message those players.'
COLORS = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}
COLORS_EX = {'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
COLORS_SET1 = {'Lavender', 'Navy', 'Lime', 'Coral', 'Maroon'}
COLORS_SET2 = {'Magenta', 'Cyan', 'Mint', 'Peach', 'Silver'}
COLORS_15 = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Lavender', 'Navy', 'Lime', 'Coral', 'Maroon'}
COLORS_ALL = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
COLORS_BBC = {White = '[FFFFFF]', Brown = '[703A16]', Red = '[DA1917]', Orange = '[F3631C]', Yellow = '[E6E42B]', Green = '[30B22A]', Teal = '[20B09A]', Blue = '[1E87FF]', Purple = '[9F1FEF]', Pink = '[F46FCD]', Magenta = '[FF007F]', Lavender = '[967BB6]', Navy = '[616BD4]', Cyan = '[49D5FD]', Mint = '[89C381]', Lime = '[B8F161]', Peach = '[F1D4A2]', Coral = '[E29A8A]', Maroon = '[800000]', Silver = '[BEBEBE]'}
COLORS_RGB = {White = {1,1,1}, Brown = {113/255,59/255,23/255}, Red = {219/255,26/255,24/255}, Orange = {244/255,100/255,29/255}, Yellow = {231/255,229/255,44/255}, Green = {49/255,179/255,43/255}, Teal = {33/255,177/255,155/255}, Blue = {31/255,136/255,255/255}, Purple = {160/255,32/255,240/255}, Pink = {245/255,112/255,206/255}, Magenta = {255/255,0/255,127/255}, Lavender = {150/255,123/255,182/255}, Navy = {0/255,0/255,128/255}, Cyan = {73/255,213/255,253/255}, Mint = {137/255,195/255,129/255}, Lime = {184/255,241/255,97/255}, Peach = {241/255,212/255,162/255}, Coral = {226/255,154/255,138/255}, Maroon = {128/255,0,0}, Silver = {190/255,190/255,190/255},}
VOTEHAND_SHOW_SCALE = {3,1,3}
VOTEHAND_HIDE_SCALE = {0,0,0}

function radius(rad, angle, height)
    return {rad*math.sin(angle*math.pi/180), height, rad*math.cos(angle*math.pi/180)}
end

ANGLE10 = {White = 45, Brown = 75, Red = 105, Orange = 135, Yellow = 165, Green = 195, Teal = 225, Blue = 255, Purple = 285, Pink = 315,}
ANGLE15 = {White = 40, Brown = 60, Red = 80, Orange = 100, Yellow = 120, Green = 140, Teal = 160, Blue = 180, Purple = 200, Pink = 220, Lavender = 240, Navy = 260, Lime = 280, Coral = 300, Maroon = 320}
ANGLE20 = {White = 37.5, Brown = 52.5, Red = 67.5, Orange = 82.5, Yellow = 97.5, Green = 112.5, Teal = 127.5, Blue = 142.5, Purple = 157.5, Pink = 172.5, Magenta = 187.5, Lavender = 202.5, Navy = 217.5, Cyan = 232.5, Mint = 247.5, Lime = 262.5, Peach = 277.5, Coral = 292.5, Maroon = 307.5, Silver = 322.5}

PLAYER_MODES = {'p10', 'p15', 'p20'}
PARAMS = {}
for k,v in pairs(PLAYER_MODES) do
    PARAMS[v] = {
        VOTEHAND_SHOW_POS = {},
        VOTEHAND_HIDE_POS = {},
        AVATAR_POS = {},
        AVATAR_ROT = {},
        LIGHT_POS = {},
        DECAL_POS = {},
        DECAL_ROT = {},
        ALIVE_BASE_POS = {},
        ALIVE_TOKEN_POS = {},
        VOTE_PANEL_POS = {},
        ROT = {},
        ROLE_SHEET_POS = {},
        ZONE_POS = {},
        HAND_POS = {},
        HAND_ROT = {},
        TEXT_POS = {},
        TEXT_ROT = {},
    }
end

for k,v in pairs(COLORS) do
    PARAMS.p10.VOTEHAND_SHOW_POS[v] = radius(45, ANGLE10[v], 5)
    PARAMS.p10.VOTEHAND_HIDE_POS[v] = radius(75, ANGLE10[v], -5)
    PARAMS.p10.AVATAR_POS[v] = radius(87, ANGLE10[v], 8.5)
    PARAMS.p10.AVATAR_ROT[v] = {180, ANGLE10[v], 180}
    PARAMS.p10.LIGHT_POS[v] = radius(84, ANGLE10[v], 8.5)
    PARAMS.p10.DECAL_POS[v] = radius(45, ANGLE10[v], 1.1)
    PARAMS.p10.DECAL_ROT[v] = {90, ANGLE10[v] - 180, 0}
    PARAMS.p10.ALIVE_BASE_POS[v] = radius(55, ANGLE10[v], 1)
    PARAMS.p10.ALIVE_TOKEN_POS[v] = radius(55, ANGLE10[v], 1.16)
    PARAMS.p10.VOTE_PANEL_POS[v] = radius(61, ANGLE10[v], 0.8)
    PARAMS.p10.ROT[v] = {0, ANGLE10[v], 0}
    PARAMS.p10.ROLE_SHEET_POS[v] = radius(71,ANGLE10[v], 1)
    PARAMS.p10.ZONE_POS[v] = radius(71,ANGLE10[v], 1)
    PARAMS.p10.HAND_POS[v] = radius(85,ANGLE10[v], 3.5)
    PARAMS.p10.HAND_ROT[v] = {0, ANGLE10[v] + 180, 0}
end

for k,v in pairs(COLORS_15) do
    PARAMS.p15.VOTEHAND_SHOW_POS[v] = radius(45, ANGLE15[v], 5)
    PARAMS.p15.VOTEHAND_HIDE_POS[v] = radius(75, ANGLE15[v], -5)
    PARAMS.p15.AVATAR_POS[v] = radius(87, ANGLE15[v], 8.5)
    PARAMS.p15.AVATAR_ROT[v] = {180, ANGLE15[v], 180}
    PARAMS.p15.LIGHT_POS[v] = radius(84, ANGLE15[v], 8.5)
    PARAMS.p15.DECAL_POS[v] = radius(45, ANGLE15[v], 1.1)
    PARAMS.p15.DECAL_ROT[v] = {90, ANGLE15[v] - 180, 0}
    PARAMS.p15.ALIVE_BASE_POS[v] = radius(55, ANGLE15[v], 1)
    PARAMS.p15.ALIVE_TOKEN_POS[v] = radius(55, ANGLE15[v], 1.16)
    PARAMS.p15.VOTE_PANEL_POS[v] = radius(61, ANGLE15[v], 0.8)
    PARAMS.p15.ROT[v] = {0, ANGLE15[v], 0}
    PARAMS.p15.ROLE_SHEET_POS[v] = radius(71,ANGLE15[v], 1)
    PARAMS.p15.ZONE_POS[v] = radius(71,ANGLE15[v], 1)
    PARAMS.p15.HAND_POS[v] = radius(85,ANGLE15[v], 3.5)
    PARAMS.p15.HAND_ROT[v] = {0, ANGLE15[v] + 180, 0}
    PARAMS.p15.TEXT_POS[v] = radius(86.6,ANGLE15[v], 1)
    PARAMS.p15.TEXT_ROT[v] = {90, ANGLE15[v], 0}
end

for k,v in pairs(COLORS_ALL) do
    PARAMS.p20.VOTEHAND_SHOW_POS[v] = radius(45, ANGLE20[v], 5)
    PARAMS.p20.VOTEHAND_HIDE_POS[v] = radius(75, ANGLE20[v], -5)
    PARAMS.p20.AVATAR_POS[v] = radius(87, ANGLE20[v], 8.5)
    PARAMS.p20.AVATAR_ROT[v] = {180, ANGLE20[v], 180}
    PARAMS.p20.LIGHT_POS[v] = radius(84, ANGLE20[v], 8.5)
    PARAMS.p20.DECAL_POS[v] = radius(45, ANGLE20[v], 1.1)
    PARAMS.p20.DECAL_ROT[v] = {90, ANGLE20[v] - 180, 0}
    PARAMS.p20.ALIVE_BASE_POS[v] = radius(55, ANGLE20[v], 1)
    PARAMS.p20.ALIVE_TOKEN_POS[v] = radius(55, ANGLE20[v], 1.16)
    PARAMS.p20.VOTE_PANEL_POS[v] = radius(61, ANGLE20[v], 0.8)
    PARAMS.p20.ROT[v] = {0, ANGLE20[v], 0}
    PARAMS.p20.ROLE_SHEET_POS[v] = radius(71,ANGLE20[v], 1)
    PARAMS.p20.ZONE_POS[v] = radius(71,ANGLE20[v], 1)
    PARAMS.p20.HAND_POS[v] = radius(85,ANGLE20[v], 3.5)
    PARAMS.p20.HAND_ROT[v] = {0, ANGLE20[v] + 180, 0}
    PARAMS.p20.TEXT_POS[v] = radius(86.6,ANGLE20[v], 1)
    PARAMS.p20.TEXT_ROT[v] = {90, ANGLE20[v], 0}
end

TABLE10_MODEL = 'http://cloud-3.steamusercontent.com/ugc/793119007255119639/7FF0A75B6102E57729B9ECBD0A37DBC4C3C944A4/'
TABLE15_MODEL = 'http://cloud-3.steamusercontent.com/ugc/793119007255081165/C8DBFEB7492079CB9F9C331BD10B392F43EC55FF/'
TABLE20_MODEL = 'http://cloud-3.steamusercontent.com/ugc/793119007254908157/42DD98CD69FFD19403E269A2602119EE2F628BC8/'


ZONE_GUIDS = {Black = 'cf55c7', White = '3fbf54', Brown = '0bbe0f', Red = 'f8da43', Orange = '1af215', Yellow = '9c2b70', Green = '7fd6f6', Teal = '5e5e3d', Blue = '23abba', Purple = '450eab', Pink = '834ef0', Magenta = 'c250ec', Lavender = '8daef9', Navy = '1a0b6b', Cyan = 'b73bc0', Mint = '742d4e', Lime = '155c40', Peach = '004a7d', Coral = 'abb4e7', Maroon = 'd314d5', Silver = '34f0f3'}
TEXT_GUIDS = {Magenta = '1f5c30', Lavender = 'b6123b', Navy = 'aaf90e', Cyan = 'f91039', Mint = '7ccfd8', Lime = '955539', Peach = '5e50cf', Coral = '516c8f', Maroon = 'c71439', Silver = '25fc49', Version = '276848'}
LIGHT_GUIDS = {Magenta = '2f23e0', Lavender = 'df8ffd', Navy = 'a4df0a', Cyan = '9e4db0', Mint = 'a32fa1', Lime = '7830b8', Peach = 'c83e23', Coral = '81444e', Maroon = 'cf48c9', Silver = 'c0e7c1'}
TABLE_GUID = '7f1f5f'
ALIVE_BASE_GUIDS = {White = '56627e', Brown = '3c798c', Red = '2e008b', Orange = '4f9c19', Yellow = '9872ef', Green = '8d3944', Teal = 'd96881', Blue = '042a74', Purple = '0d98a5', Pink = '969b3b', Magenta = '4b9fd7', Lavender = '07c7fc', Navy = '2655ea', Cyan = 'b370ab', Mint = 'b1b554',  Lime = '6b1f76', Peach = '5de91f', Coral = '775d89', Maroon = 'e7050a', Silver = '48ee96'}
ALIVE_TOKEN_GUIDS = {White = 'e086a9', Brown = '1ee3a8', Red = '295c1a', Orange = '8d0617', Yellow = '6c495f', Green = '3871b1', Teal = 'e093e4', Blue = '33f167', Purple = '61ec25', Pink = '4f2471', Magenta = '2eb912', Lavender = 'ec1a85', Navy = 'f451d7', Cyan = 'b0a452', Mint = '5d12f3', Lime = '9bd823', Peach = '9635c8', Coral = '781ec7', Maroon = 'f87b13', Silver = 'e666d2'}
VOTE_PANEL_GUIDS = {White = '5eb60a', Brown = '99b89d', Red = '83bfb8', Orange = '4bff0a', Yellow = 'ccf37c', Green = '57b463', Teal = '47aff8', Blue = 'c2f614', Purple = '77ef86', Pink = '8b7a08', Magenta = '0be973', Lavender = 'eb07d8', Navy = '958d03', Cyan = '40952d', Mint = '99ffd7', Lime = '9d5300', Peach = '39111c', Coral = '2612cf', Maroon = 'c85c07', Silver = '5d6725',}
VOTEHAND_GUIDS = {White = '7d483f', Brown = 'd04712', Red = '5f127b', Orange = 'cd9709', Yellow = '77fafc', Green = '252431', Teal = '0f6d9f', Blue = '0ae7c8', Purple = '002931', Pink = '971c6f', Magenta = 'bf3d0e', Lavender = '9e5049', Navy = 'c5c592', Cyan = '2b4030', Mint = '23e513', Lime = 'd4ee32', Peach = '1d92dd', Coral = '58ad10', Maroon = '3e670e', Silver = '72ea95'}
ROLE_SHEET_GUIDS_TB = {White = '7e8816', Brown = 'f59d97', Red = 'd3f94f', Orange = '74a1bb', Yellow = '3c8021', Green = 'f42ef4', Teal = '4c0520', Blue = '176862', Purple = 'a872de', Pink = 'd79c68', Magenta = 'ec429a', Lavender = 'ed5d8c', Navy = '696f16', Cyan = '30897d', Mint = '030e1d', Lime = 'd7bd47', Peach = '5f7b4b', Coral = 'd01ecc', Maroon = 'cc7b32', Silver = '64e20d'}
ROLE_SHEET_GUIDS_BM = {White = '49666f', Brown = '310d86', Red = 'd09bb7', Orange = '6e1318', Yellow = '9ffd3b', Green = '674ac7', Teal = '28f902', Blue = '98a423', Purple = 'f3bb6f', Pink = 'b693a5', Magenta = '513deb', Lavender = '312ffe', Navy = 'ec482b', Cyan = '8fcb6b', Mint = '2a9008', Lime = 'dea506', Peach = 'cbdbb9', Coral = 'd7fc0e', Maroon = 'aeb276', Silver = '0213e5',}
ROLE_SHEET_GUIDS_SV = {White = '87bc56', Brown = 'c4c57e', Red = '58ece2', Orange = '5f523a', Yellow = 'bc0275', Green = '531a2a', Teal = '9dd592', Blue = 'fbdc69', Purple = 'c096af', Pink = '7fa413', Magenta = '161300', Lavender = 'a491e1', Navy = '19f5eb', Cyan = 'e020c2', Mint = '6a2a30', Lime = 'ca7b1f', Peach = '8a1638', Coral = '9516ca', Maroon = 'da98cb', Silver = '86070c',}
ROLE_SHEET_GUIDS_CU = {White = 'a56758', Brown = '1e5461', Red = 'bc13b3', Orange = 'cb9aeb', Yellow = '578b2f', Green = '82f9f5', Teal = 'e3f397', Blue = 'd18938', Purple = '4baef3', Pink = '7c5b4f', Magenta = '3991eb', Lavender = '79df60', Navy = '2f0a81', Cyan = '43a691', Mint = '08ff7b', Lime = '06f32b', Peach = 'de8dc3', Coral = '6be9c8', Maroon = '05197a', Silver = '547727',}

NIGHT_HELPER_GUID = 'bb89aa'
CLOCK_CONTROLS_GUID = '184d11'
TEAM_TOOL_GUID = '6fbc83'
PURPLE_HAND_GUID = '88ad59'
BLUE_HAND_GUID = '12ad6f'
RED_HAND_GUID = 'eaee43'
CLOCK_GUID = '0d5f75'


------------------Variables
numAlive = 0
numPlayers = 0
currAlive = 0
currVotes = 0
currPlayers = 0
teamToolReloaded = false
mode = 'TB'
currentNominator = ''
currentNominated = ''
history = '[FFFFFF]Vote History:[-]'
roles = {}
aliveTokens = {}
allAliveTokens = {}
canNominate = {}
canBeNominated = {}
living = {}
hasVote = {}
voted = {}
voteLock = {}
voteButtonsOn = {}
playerMode = 'p20'

for k,v in pairs(COLORS_ALL) do
    aliveTokens[v] = {object = 0, vote = 0}
    canNominate[v] = true
    canBeNominated[v] = true
    living[v] = true
    hasVote[v] = true
    voted[v] = false
    voteLock[v] = false
    voteButtonsOn[v] = false
end

players = {}
playersEx = {}
playersExIds = {}
avatarGuids = {}
for k,v in pairs(COLORS_EX) do
    playersEx[v] = nil
    playersExIds[v] = nil
    avatarGuids[v] = nil
end

avatarUrl = ''
uiColor = ''
uiMsg = ''
colorTable = false
started = false
customSet = false
customList = {}


------------------Functions
function onLoad(saveString)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        started = save['s']
        mode = save['m']
        roles = save['r']
        history = save['h']
        playersExIds = save['p']
        avatarGuids = save['a']
        customSet = save['c']
        customList = save['cl']
        playerMode = save['pm']
    end
    Turns.order = {'Black', 'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}
    setNotes(START_MESSAGE)
    if not started then
        local allPlayers = Player.getPlayers()
        if #allPlayers <= 11 then
            table10()
        elseif #allPlayers <= 16 then
            table15()
        else
            table20()
        end
    end

    local obj, colors
    obj = getObjectFromGUID(TABLE_GUID)
    if obj then
        obj.interactable = false
    end
    for k,v in pairs(VOTE_PANEL_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end
    for k,v in pairs(ALIVE_BASE_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.setLock(true)
            obj.interactable = false
        end
    end
    if not started then
        for k,v in pairs(ALIVE_TOKEN_GUIDS) do
            obj = getObjectFromGUID(v)
            if obj then
                obj.setLock(true)
                obj.interactable = false
            end
        end
    end
    for k,v in pairs(VOTEHAND_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.setLock(true)
            obj.interactable = false
        end
    end
    for k,v in pairs(TEXT_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end
    obj = getObjectFromGUID(TEXT_GUIDS['Version'])
    obj.setValue('v ' .. VERSION)

    for k,v in pairs(LIGHT_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
            obj.setScale({0,0,0})
        end
    end

    refreshUI()
    updatePlayers()
    showExtensionUI()
    Wait.time(refreshObjects,10)

    -- check if players are alive, dead, and have a vote token regularly
    Wait.time(
        function()
            updatePlayers()
            for k,v in pairs(COLORS_ALL) do
                getAliveTokens(v)
            end
            handleLifeUI()
        end
    , 2, -1)
end

function onSave()
    local save = {}
    save['s'] = started
    save['m'] = mode
    save['r'] = roles
    save['h'] = history
    save['p'] = playersExIds
    save['a'] = avatarGuids
    save['c'] = customSet
    save['cl'] = customList
    save['pm'] = playerMode
    local saveString = JSON.encode(save)
    return saveString
end

function table10()
    local obj, tab, pos,rot
    local roleSheetGuids

    UI.setAttribute('colorSelection' .. playerMode,'active',false)
    playerMode = 'p10'
    obj = getObjectFromGUID(TABLE_GUID)
    tab = obj.getCustomObject()
    tab.mesh = TABLE10_MODEL
    tab.collider = TABLE10_MODEL
    obj.setCustomObject(tab)
    obj.reload()
    Wait.time(function () getObjectFromGUID(TABLE_GUID).interactable = false end, 0.1)
    if mode == 'TB' then
        roleSheetGuids = ROLE_SHEET_GUIDS_TB
    elseif mode == 'BM' then
        roleSheetGuids = ROLE_SHEET_GUIDS_BM
    elseif mode == 'SV' then
        roleSheetGuids = ROLE_SHEET_GUIDS_SV
    elseif mode == 'CU' then
        roleSheetGuids = ROLE_SHEET_GUIDS_CU
    end

    for k,v in pairs(COLORS) do
        obj = getObjectFromGUID(ZONE_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p10.ZONE_POS[v])
        obj.setScale({28,10,13})
        obj.setRotationSmooth(PARAMS.p10.ROT[v])

        obj = getObjectFromGUID(roleSheetGuids[v])
        if obj then
            obj.setPositionSmooth(PARAMS.p10.ROLE_SHEET_POS[v])
            obj.setRotationSmooth(PARAMS.p10.ROT[v])
        end

        obj = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p10.VOTE_PANEL_POS[v])
        obj.setRotationSmooth(PARAMS.p10.ROT[v])

        obj = getObjectFromGUID(VOTEHAND_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p10.VOTEHAND_HIDE_POS[v])
        obj.setRotationSmooth(PARAMS.p10.ROT[v])

        obj = getObjectFromGUID(ALIVE_BASE_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p10.ALIVE_BASE_POS[v])
        obj.setRotationSmooth(PARAMS.p10.ROT[v])

        obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
        if obj then
            obj.setPositionSmooth(PARAMS.p10.ALIVE_TOKEN_POS[v])
            obj.setRotationSmooth(PARAMS.p10.ROT[v])
        end

        Player[v].setHandTransform({position = PARAMS.p10.HAND_POS[v], rotation = PARAMS.p10.HAND_ROT[v]})
    end

    for k,v in pairs(COLORS_EX) do
        obj = getObjectFromGUID(ZONE_GUIDS[v])
        obj.setScale({0,0,0})
        pos = obj.getPosition()
        obj.setPosition({pos.x, -10, pos.z})

        obj = getObjectFromGUID(roleSheetGuids[v])
        if obj then
            obj.setPosition({0,0,0})
            obj.interactable = false
        end

        obj = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
        obj.setScale({0,0,0})
        pos = obj.getPosition()
        obj.setPosition({pos.x, -10, pos.z})

        obj = getObjectFromGUID(ALIVE_BASE_GUIDS[v])
        obj.setScale({0,0,0})
        pos = obj.getPosition()
        obj.setPosition({pos.x, -10, pos.z})

        obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
        if obj then
        obj.setScale({0,0,0})
            pos = obj.getPosition()
            obj.setPosition({pos.x, -10, pos.z})
        end

        obj = getObjectFromGUID(TEXT_GUIDS[v])
        obj.setPosition({0,0,0})
    end
    updatePlayers()
    for k,v in pairs(COLORS_EX) do
        if players[v] ~= nil then
            sitUI(players[v], _, v)
        end
    end
    showExtensionUI()
    obj = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    obj.call('updateSettings')
    createSnapPoints()
end

function table15()
    local obj, tab, pos

    UI.setAttribute('colorSelection' .. playerMode,'active',false)
    playerMode = 'p15'
    obj = getObjectFromGUID(TABLE_GUID)
    tab = obj.getCustomObject()
    tab.mesh = TABLE15_MODEL
    tab.collider = TABLE15_MODEL
    obj.setCustomObject(tab)
    obj.reload()
    Wait.time(function () getObjectFromGUID(TABLE_GUID).interactable = false end, 0.1)
    if mode == 'TB' then
        roleSheetGuids = ROLE_SHEET_GUIDS_TB
    elseif mode == 'BM' then
        roleSheetGuids = ROLE_SHEET_GUIDS_BM
    elseif mode == 'SV' then
        roleSheetGuids = ROLE_SHEET_GUIDS_SV
    elseif mode == 'CU' then
        roleSheetGuids = ROLE_SHEET_GUIDS_CU
    end

    for k,v in pairs(COLORS) do
        obj = getObjectFromGUID(ZONE_GUIDS[v])
        obj.setScale({22,10,13})
        obj.setPositionSmooth(PARAMS.p15.ZONE_POS[v])
        obj.setRotationSmooth(PARAMS.p15.ROT[v])

        obj = getObjectFromGUID(roleSheetGuids[v])
        if obj then
            obj.setPositionSmooth(PARAMS.p15.ROLE_SHEET_POS[v])
            obj.setRotationSmooth(PARAMS.p15.ROT[v])
        end

        obj = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p15.VOTE_PANEL_POS[v])
        obj.setRotationSmooth(PARAMS.p15.ROT[v])

        obj = getObjectFromGUID(VOTEHAND_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p15.VOTEHAND_HIDE_POS[v])
        obj.setRotationSmooth(PARAMS.p15.ROT[v])

        obj = getObjectFromGUID(ALIVE_BASE_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p15.ALIVE_BASE_POS[v])
        obj.setRotationSmooth(PARAMS.p15.ROT[v])

        obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
        if obj then
            obj.setPositionSmooth(PARAMS.p15.ALIVE_TOKEN_POS[v])
            obj.setRotationSmooth(PARAMS.p15.ROT[v])
        end

        Player[v].setHandTransform({position = PARAMS.p15.HAND_POS[v], rotation = PARAMS.p15.HAND_ROT[v]})
    end

    for k,v in pairs(COLORS_SET1) do
        obj = getObjectFromGUID(ZONE_GUIDS[v])
        obj.setScale({11,5,6.5})
        obj.setPositionSmooth(PARAMS.p15.ZONE_POS[v])
        obj.setRotationSmooth(PARAMS.p15.ROT[v])

        obj = getObjectFromGUID(roleSheetGuids[v])
        if obj then
            obj.setScale({1.64,1,1.64})
            obj.setPositionSmooth(PARAMS.p15.ROLE_SHEET_POS[v])
            obj.setRotationSmooth(PARAMS.p15.ROT[v])
            obj.interactable = true
        end

        obj = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
        obj.setScale({1.5,0.34,1.5})
        obj.setPositionSmooth(PARAMS.p15.VOTE_PANEL_POS[v])
        obj.setRotationSmooth(PARAMS.p15.ROT[v])

        obj = getObjectFromGUID(VOTEHAND_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p15.VOTEHAND_HIDE_POS[v])
        obj.setRotationSmooth(PARAMS.p15.ROT[v])

        obj = getObjectFromGUID(ALIVE_BASE_GUIDS[v])
        obj.setScale({2.24,1,2.24})
        obj.setPositionSmooth(PARAMS.p15.ALIVE_BASE_POS[v])
        obj.setRotationSmooth(PARAMS.p15.ROT[v])

        if obj then
            obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
            if obj then
                obj.setScale({1.82,1,1.82})
                obj.setPositionSmooth(PARAMS.p15.ALIVE_TOKEN_POS[v])
                obj.setRotationSmooth(PARAMS.p15.ROT[v])
            end
        end

        obj = getObjectFromGUID(TEXT_GUIDS[v])
        obj.setPosition(PARAMS.p15.TEXT_POS[v])
        obj.setRotationSmooth(PARAMS.p15.TEXT_ROT[v])
        obj = getObjectFromGUID(LIGHT_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p15.LIGHT_POS[v])

        if avatarGuids[v] then
            obj = getObjectFromGUID(avatarGuids[v])
            obj.setPositionSmooth(PARAMS.p15.AVATAR_POS[v])
            obj.setRotationSmooth(PARAMS.p15.AVATAR_ROT[v])
        end
    end

    for k,v in pairs(COLORS_SET2) do
        obj = getObjectFromGUID(ZONE_GUIDS[v])
        obj.setScale({0,0,0})
        pos = obj.getPosition()
        obj.setPosition({pos.x, -10, pos.z})

        obj = getObjectFromGUID(roleSheetGuids[v])
        if obj then
            obj.setPosition({0,0,0})
            obj.interactable = false
        end

        obj = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
        obj.setScale({0,0,0})
        pos = obj.getPosition()
        obj.setPosition({pos.x, -10, pos.z})

        obj = getObjectFromGUID(ALIVE_BASE_GUIDS[v])
        obj.setScale({0,0,0})
        pos = obj.getPosition()
        obj.setPosition({pos.x, -10, pos.z})

        if obj then
            obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
            if obj then
                obj.setScale({0,0,0})
                pos = obj.getPosition()
                obj.setPosition({pos.x, -10, pos.z})
            end
        end

        obj = getObjectFromGUID(TEXT_GUIDS[v])
        obj.setPosition({0,0,0})
        obj = getObjectFromGUID(LIGHT_GUIDS[v])
        pos = obj.getPosition()
        obj.setPosition({pos.x, -10, pos.z})
    end

    updatePlayers()
    for k,v in pairs(COLORS_SET2) do
        if players[v] ~= nil then
            sitUI(players[v], _, v)
        end
    end
    showExtensionUI()
    obj = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    obj.call('updateSettings')
    createSnapPoints()
end

function table20()
    local obj, tab, pos

    UI.setAttribute('colorSelection' .. playerMode,'active',false)
    playerMode = 'p20'
    obj = getObjectFromGUID(TABLE_GUID)
    tab = obj.getCustomObject()
    tab.mesh = TABLE20_MODEL
    tab.collider = TABLE20_MODEL
    obj.setCustomObject(tab)
    obj.reload()
    Wait.time(function () getObjectFromGUID(TABLE_GUID).interactable = false end, 0.1)
    if mode == 'TB' then
        roleSheetGuids = ROLE_SHEET_GUIDS_TB
    elseif mode == 'BM' then
        roleSheetGuids = ROLE_SHEET_GUIDS_BM
    elseif mode == 'SV' then
        roleSheetGuids = ROLE_SHEET_GUIDS_SV
    elseif mode == 'CU' then
        roleSheetGuids = ROLE_SHEET_GUIDS_CU
    end

    for k,v in pairs(COLORS) do
        obj = getObjectFromGUID(ZONE_GUIDS[v])
        obj.setScale({16,10,13})
        obj.setPositionSmooth(PARAMS.p20.ZONE_POS[v])
        obj.setRotationSmooth(PARAMS.p20.ROT[v])

        obj = getObjectFromGUID(roleSheetGuids[v])
        if obj then
            obj.setPositionSmooth(PARAMS.p20.ROLE_SHEET_POS[v])
            obj.setRotationSmooth(PARAMS.p20.ROT[v])
        end

        obj = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p20.VOTE_PANEL_POS[v])
        obj.setRotationSmooth(PARAMS.p20.ROT[v])

        obj = getObjectFromGUID(VOTEHAND_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p20.VOTEHAND_HIDE_POS[v])
        obj.setRotationSmooth(PARAMS.p20.ROT[v])

        obj = getObjectFromGUID(ALIVE_BASE_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p20.ALIVE_BASE_POS[v])
        obj.setRotationSmooth(PARAMS.p20.ROT[v])

        obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
        if obj then
            obj.setPositionSmooth(PARAMS.p20.ALIVE_TOKEN_POS[v])
            obj.setRotationSmooth(PARAMS.p20.ROT[v])
        end

        Player[v].setHandTransform({position = PARAMS.p20.HAND_POS[v], rotation = PARAMS.p20.HAND_ROT[v]})
    end

    for k,v in pairs(COLORS_EX) do
        obj = getObjectFromGUID(ZONE_GUIDS[v])
        obj.setScale({8,5,6.5})
        obj.setPositionSmooth(PARAMS.p20.ZONE_POS[v])
        obj.setRotationSmooth(PARAMS.p20.ROT[v])

        obj = getObjectFromGUID(roleSheetGuids[v])
        if obj then
            obj.setScale({1.64,1,1.64})
            obj.setPositionSmooth(PARAMS.p20.ROLE_SHEET_POS[v])
            obj.setRotationSmooth(PARAMS.p20.ROT[v])
            obj.interactable = true
        end

        obj = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
        obj.setScale({1.5,0.34,1.5})
        obj.setPositionSmooth(PARAMS.p20.VOTE_PANEL_POS[v])
        obj.setRotationSmooth(PARAMS.p20.ROT[v])

        obj = getObjectFromGUID(ALIVE_BASE_GUIDS[v])
        obj.setScale({2.24,1,2.24})
        obj.setPositionSmooth(PARAMS.p20.ALIVE_BASE_POS[v])
        obj.setRotationSmooth(PARAMS.p20.ROT[v])

        obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
        if obj then
            obj.setScale({1.82,1,1.82})
            obj.setPositionSmooth(PARAMS.p20.ALIVE_TOKEN_POS[v])
            obj.setRotationSmooth(PARAMS.p20.ROT[v])
        end

        obj = getObjectFromGUID(TEXT_GUIDS[v])
        obj.setPosition(PARAMS.p20.TEXT_POS[v])
        obj.setRotationSmooth(PARAMS.p20.TEXT_ROT[v])

        obj = getObjectFromGUID(LIGHT_GUIDS[v])
        obj.setPositionSmooth(PARAMS.p20.LIGHT_POS[v])

        if avatarGuids[v] then
            obj = getObjectFromGUID(avatarGuids[v])
            obj.setPositionSmooth(PARAMS.p20.AVATAR_POS[v])
            obj.setRotationSmooth(PARAMS.p20.AVATAR_ROT[v])
        end
    end
    showExtensionUI()
    obj = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    obj.call('updateSettings')
    createSnapPoints()
end

function createSnapPoints()
    local snapTable = {}
    local pos
    table.insert(snapTable, {position = {0,0,0}, rotation = {0,180,0}, rotation_snap = true})
    table.insert(snapTable, {position = {16,0,58}, rotation = {0,0,0}, rotation_snap = true})
    if playerMode == 'p10' then
        for k,v in pairs(COLORS) do
            table.insert(snapTable, {position = PARAMS.p10.ALIVE_TOKEN_POS[v], rotation = PARAMS.p10.ROT[v], rotation_snap = true})
            pos = radius(10, ANGLE10[v], 1.0)
            pos[3] = pos[3] + 83
            table.insert(snapTable, {position = pos, rotation = {0,0,0}, rotation_snap = true})
        end
    elseif playerMode == 'p15' then
        for k,v in pairs(COLORS_15) do
            table.insert(snapTable, {position = PARAMS.p15.ALIVE_TOKEN_POS[v], rotation = PARAMS.p15.ROT[v], rotation_snap = true})
            pos = radius(12, ANGLE15[v], 1.0)
            pos[3] = pos[3] + 83
            table.insert(snapTable, {position = pos, rotation = {0,0,0}, rotation_snap = true})
        end
    elseif playerMode == 'p20' then
        for k,v in pairs(COLORS_ALL) do
            table.insert(snapTable, {position = PARAMS.p20.ALIVE_TOKEN_POS[v], rotation = PARAMS.p20.ROT[v], rotation_snap = true})
            pos = radius(14, ANGLE20[v], 1.0)
            pos[3] = pos[3] + 83
            table.insert(snapTable, {position = pos, rotation = {0,0,0}, rotation_snap = true})
        end
    end
    self.setSnapPoints(snapTable)
end

function onPlayerChangeColor(color)
    refreshUI()
    updatePlayers()
    local obj = getObjectFromGUID(TEAM_TOOL_GUID)
    if obj then
        obj.call('refreshUI')
    end
end

function onChat(message, player)
    local args = {} -- The arguments following a command
    local command, msg, len

    for v in string.gmatch(message, "%S+") do
            args[#args + 1] = v
    end

    if args[1] ~= nil then
        command = string.lower(args[1])
        len = string.len(command)
        msg = string.sub(message, len + 2)
    end

    if command == 'c' then
        player.print(HELP_MESSAGE)
        return false
    elseif command == 'h' then
        player.print(history)
        return false
    elseif command == 'r' then
        updatePlayers()
        local role, char
        for k,v in pairs(players) do
            if v.steam_id == player.steam_id then
                role = roles[k]
                if role == nil then
                    player.print('You do not have a role.')
                    return false
                else
                    char = string.gsub(role, ' ', '_')
                    player.print('Your role is ' .. role .. '!')
                    player.print(role .. ' - ' .. CHARACTERS[char].Description)
                    return false
                end
            end
        end
        player.print('You do not have a role.')
        return false
    elseif command == 'v' then
        player.print('Version ' .. VERSION)
        return false
    elseif command == '.magenta' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Magenta', msg)
        end
        return false
    elseif command == '.lavender' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Lavender', msg)
        end
        return false
    elseif command == '.navy' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Navy', msg)
        end
        return false
    elseif command == '.cyan' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Cyan', msg)
        end
        return false
    elseif command == '.mint' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Mint', msg)
        end
        return false
    elseif command == '.lime' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Lime', msg)
        end
        return false
    elseif command == '.peach' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Peach', msg)
        end
        return false
    elseif command == '.coral' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Coral', msg)
        end
        return false
    elseif command == '.maroon' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Maroon', msg)
        end
        return false
    elseif command == '.silver' then
        if player.color == 'Black' or DEBUG then
            chatMessage('Silver', msg)
        end
        return false
    elseif command == '.move' then
        if player.color == 'Black' or player.admin or DEBUG then
            chatMove(args[2], args[3], player)
            return false
        end
    elseif command == '.remove' then
        if player.color == 'Black' or player.admin or DEBUG then
            chatRemove(args[2], player)
            return false
        end
    elseif command == '.swap' then
        if player.color == 'Black' or player.admin or DEBUG then
            chatSwap(args[2], args[3], player)
            return false
        end
    elseif command == 'debug' and DEBUG then
        return false
    end

    for k,v in pairs(COLORS_EX) do
        if playersExIds[v] == player.steam_id then
            printToAll(COLORS_BBC[v] .. player.steam_name .. ':[-] ' .. message)
            return false
        end
    end
end

function chatMessage(color, message)
    if message == nil then
        return
    end
    updatePlayers()
    local player = players[color]
    if player ~= nil then
        local msg = COLORS_BBC[color] .. '<' .. color .. '>[-] [000000]' .. Player['Black'].steam_name .. ':[-] ' .. message
        player.print(msg)
        Player['Black'].print(msg)
    else
        Player['Black'].print('Nobody is sitting in ' .. color .. '.', {1,0,0})
    end
end

function chatMove(playerName, seatColor, player)
    if playerName == nil or seatColor == nil then
        return
    end

    local playerFound = false
    local colorFound = false
    local playerList = Player.getPlayers()

    for k,v in pairs(COLORS_ALL) do
        if string.match(string.lower(v), string.lower(seatColor)) then
            colorFound = v
            break
        end
    end
    if string.match('black', string.lower(seatColor)) then
        colorFound = 'Black'
    end

    if string.match('grey', string.lower(seatColor)) then
        colorFound = 'Grey'
    end
    if not colorFound then
        player.print('Error: Could not move player: invalid color.', {1,0,0})
        return
    end

    if playerMode == 'p10' and inTable(colorFound, COLORS_EX) then
        return
    end

    if playerMode == 'p15' and inTable(colorFound, COLORS_SET2) then
        return
    end

    for k,v in pairs(playerList) do
        if string.match(string.lower(v.steam_name), string.lower(playerName)) then
            playerFound = v
        end
    end
    if not playerFound then
        player.print('Error: Could not move player: player not found.', {1,0,0})
        return
    end

    updatePlayers()
    if colorFound ~= 'Grey' and players[colorFound] ~= nil then
        player.print('Error: Could not move player: seat is already taken.', {1,0,0})
        return
    end

    for k,v in pairs(playersExIds) do
        if playerFound.steam_id == v then
            sitUI(playerFound, _, k)
        end
    end
    if colorFound == 'Grey' or colorFound == 'Black' or (inTable(colorFound, COLORS) and not Player[colorFound].seated) then
        playerFound.changeColor(colorFound)
        player.print(playerFound.steam_name .. ' has been moved to ' .. colorFound .. '.')
    elseif inTable(colorFound, COLORS_EX) and players[colorFound] == nil then
        playerFound.changeColor('Grey')
        sitUI(playerFound, _, colorFound)
        player.print(playerFound.steam_name .. ' has been moved to ' .. colorFound .. '.')
    end
end

function chatRemove(seatColor, player)
    if seatColor == nil then
        return
    end

    local colorFound = false
    for k,v in pairs(COLORS_ALL) do
        if string.match(string.lower(v), string.lower(seatColor)) then
            colorFound = v
            break
        end
    end
    if string.match('black', string.lower(seatColor)) then
        colorFound = 'Black'
    end

    if not colorFound then
        player.print('Error: Invalid color.', {1,0,0})
        return
    end

    updatePlayers()
    if players[colorFound] ~= nil then
        player.print(players[colorFound].steam_name .. ' has been moved to Grey.')
        if inTable(colorFound, COLORS) or colorFound == 'Black' then
            players[colorFound].changeColor('Grey')
        else
            sitUI(players[colorFound], _, colorFound)
        end
    else
        player.print('Error: Could not remove player: seat is empty.', {1,0,0})
    end
end

function chatSwap(seatColor1, seatColor2, player)
    local color1, color2, tempRole
    local player1id, player2id
    local pos1, pos2, token1, token2
    local obj

    color1 = false
    for k,v in pairs(COLORS_ALL) do
        if string.match(string.lower(v), string.lower(seatColor1)) then
            color1 = v
            break
        end
    end

    color2 = false
    for k,v in pairs(COLORS_ALL) do
        if string.match(string.lower(v), string.lower(seatColor2)) then
            color2 = v
            break
        end
    end

    if not color1 then
        player.print('Error: The first color you entered is not a color.', {1,0,0})
        return
    end

    if not color2 then
        player.print('Error: The second color you entered is not a color.', {1,0,0})
        return
    end

    updatePlayers()
    if players[color1] == nil or players[color2] == nil then
        player.print('Error: At least one of the seats is empty. Use the .move command instead.', {1,0,0})
        return
    end

    player1id = players[color1].steam_id
    player2id = players[color2].steam_id

    if inTable(color1, COLORS) then
        players[color1].changeColor('Grey')
    else
        sitUI(players[color1], _, color1)
    end


    if inTable(color2, COLORS) then
        players[color2].changeColor('Grey')
    else
        sitUI(players[color2], _, color2)
    end

    if started then
        for k,v in pairs(getAllObjects()) do
            if v.getDescription() == roles[color1] then
                token1 = v
                pos1 = v.getPosition()
                v.setColorTint(COLORS_RGB[color2])
            elseif v.getDescription() == roles[color2] then
                token2 = v
                pos2 = v.getPosition()
                v.setColorTint(COLORS_RGB[color1])
            end
        end
        token1.setPositionSmooth(pos2)
        token2.setPositionSmooth(pos1)
        tempRole = roles[color1]
        roles[color1] = roles[color2]
        roles[color2] = tempRole

        obj = getObjectFromGUID(NIGHT_HELPER_GUID)
        if obj then
            obj.call('swapColors', {color1 = color1, color2 = color2})
        end
    end

    for k,v in pairs(Player.getPlayers()) do
        if v.steam_id == player2id then
            player.print(v.steam_name .. ' has been moved to ' .. color1 .. '.')
            if inTable(color1, COLORS) then
                v.changeColor(color1)
            elseif inTable(color1, COLORS_EX) then
                sitUI(v, _, color1)
            end
            break
        end
    end

    for k,v in pairs(Player.getPlayers()) do
        if v.steam_id == player1id then
            player.print(v.steam_name .. ' has been moved to ' .. color2 .. '.')
            if inTable(color2, COLORS) then
                v.changeColor(color2)
            elseif inTable(color2, COLORS_EX) then
                sitUI(v, _, color2)
            end
            break
        end
    end
end

function inTable(input, table)
    for k,v in pairs(table) do
        if input == v then
            return true
        end
    end
    return false
end

function refreshUI()
    for _, playerColor in pairs(COLORS) do
        UI.setAttribute('player' .. playerColor, 'visibility', playerColor)
        if roles[playerColor] then
            UI.setValue('player' .. playerColor, 'Your role is ' .. roles[playerColor] .. '!')
        end
    end
end

function unlockAliveTokens()
    for k,v in pairs(ALIVE_TOKEN_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.setLock(false)
            obj.interactable = true
        end
    end
end

function checkSeatedPlayers()
    local obj
    updatePlayers()
    for k,v in pairs(COLORS) do
        if not Player[v].seated then
            obj = getObjectFromGUID(ZONE_GUIDS[v])
            obj.setValue('Black')
            obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
            obj.destruct()
        end
    end
    for k,v in pairs(COLORS_EX) do
        if players[v] == nil then
            obj = getObjectFromGUID(ALIVE_TOKEN_GUIDS[v])
            if obj then
                obj.destruct()
            end
            obj = getObjectFromGUID(ZONE_GUIDS[v])
            if obj then
                obj.setColorTint({0.69,0.69,0.69})
            end
        end
    end
end

function refreshObjects()
    local obj
    obj = getObjectFromGUID(TEAM_TOOL_GUID)
    if obj then
        obj.reload()
    end

    for k,v in pairs(VOTEHAND_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.reload()
        end
    end

    Wait.time(lockObjects, 5)
end

function lockObjects()
    local obj
    obj = getObjectFromGUID(TEAM_TOOL_GUID)
    if obj then
        obj.interactable = false
    end

    for k,v in pairs(VOTEHAND_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end
end

function getAliveTokens(color)
    local base = getObjectFromGUID(ALIVE_BASE_GUIDS[color])
    local pos = base.getPosition()
    local found = false
    local objectsFound = Physics.cast({
        origin       = pos,
        direction    = {0, 1, 0},
        type         = 1, -- int (1: Ray, 2: Sphere, 3: Box),
        max_distance = 3,
        debug        = false-- bool (true = visualize cast),
    }) -- returns { {Vector point, Vector normal, float distance, Object hit_object}, {...}, ...}

    for i, hit in ipairs(objectsFound) do
        if hit.hit_object.getName() == 'Alive Token' then
            aliveTokens[color].object = hit.hit_object
            found = true
        elseif hit.hit_object.getName() == 'Vote Token' then
            aliveTokens[color].vote = hit.hit_object
        end
        if #objectsFound == 1 then
            aliveTokens[color].vote = 0
        end
    end
    if not found then
        aliveTokens[color].object = 0
    end
end

function handleLifeUI()
    numAlive = 0
    numPlayers = 0
    local numberOfSkipped = 0 -- number of players not seated
    local numberOfVotes = 0
    local votesNeeded = 0
    local playerDist
    local allObjects = getAllObjects()

    for i=1, 20 do
        if aliveTokens[COLORS_ALL[i]].object ~= 0 and players[COLORS_ALL[i]] ~= nil then
            numPlayers = numPlayers + 1
            if aliveTokens[COLORS_ALL[i]].object.is_face_down == true then -- if life token is face down...
                if aliveTokens[COLORS_ALL[i]].vote ~= 0 then -- ..then if a vote token is present
                    UI.setAttribute('aliveImage'..i - numberOfSkipped, 'image', 'deadWithVote'..i)  -- counting skipped players to only make last images transparent
                    numberOfVotes = numberOfVotes + 1
                else
                    UI.setAttribute('aliveImage'..i - numberOfSkipped, 'image', 'deadNoVote') -- counting skipped players to only make last images transparent
                end
            else
                UI.setAttribute('aliveImage'..i - numberOfSkipped, 'image', 'alive'..i) -- counting skipped players to only make last images transparent
                numAlive = numAlive +1
                numberOfVotes = numberOfVotes + 1
            end
        else
            numberOfSkipped = numberOfSkipped +1
            UI.setAttribute('aliveImage'..21 - numberOfSkipped, 'image', 'empty') -- starting from 11 to work backwards through list of aliveImage
        end
    end
    votesNeeded = math.ceil(numAlive/2)
    if currPlayers ~= numAlive or currVotes ~= numberOfVotes then
        for k,v in pairs(allObjects) do
            if v.getName() == 'Player Distribution Chart' then
                v.call('updatePlayerDist', {num = numAlive})
                v.call('updateAlive', {living = numAlive, withVotes = numberOfVotes, needed = votesNeeded})
            end
        end
    end
    currPlayers = numAlive
    currVotes = numberOfVotes
end

-- called by the clock
function toggleLockAliveAndVoteTokens(locking) --locking is a boolean
    for i=1,20 do
        if aliveTokens[COLORS_ALL[i]].object ~= 0 then
            aliveTokens[COLORS_ALL[i]].object.setLock(locking)
            if aliveTokens[COLORS_ALL[i]].vote ~= 0 then
                aliveTokens[COLORS_ALL[i]].vote.setLock(locking)
            end
        end
    end
end

function vote(params)
    local voter = params.voter
    local handObj = getObjectFromGUID(VOTEHAND_GUIDS[voter])
    if not voteLock[voter] then
        if voted[voter] then
            voted[voter] = false
            params.index = 1
            params.color = {1,1,1}
            params.font_color = {0,0,0}
            getObjectFromGUID(VOTE_PANEL_GUIDS[voter]).editButton(params)
            handObj.setScale({0,1,0})
            handObj.setPosition(PARAMS[playerMode].VOTEHAND_HIDE_POS[voter])
        else
            voted[voter] = true
            params.index = 1
            params.color = {236/255,229/255,44/255}
            params.font_color = {1,1,1}
            getObjectFromGUID(VOTE_PANEL_GUIDS[voter]).editButton(params)
            handObj.setScale(VOTEHAND_SHOW_SCALE)
            handObj.setPositionSmooth(PARAMS[playerMode].VOTEHAND_SHOW_POS[voter])
        end
    end
end

function setVoteLock(params)
    voteLock[params.color] = true
end

function nominate(params)
    local nominator = params.nominator
    local params = {}
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    if canNominate[nominator] == false then
        return
    end

    if currentNominator == '' then
        currentNominator = nominator
        params.index = 2
        params.color = {0,0,1}
        params.font_color = {1,1,1}
        getObjectFromGUID(VOTE_PANEL_GUIDS[nominator]).editButton(params)
        clockControls.call('pointHand', {handGUID = BLUE_HAND_GUID, color = nominator})
        UI.setAttribute('colorSelection' .. playerMode,'active',false)
        colorTable = false
    elseif currentNominator == nominator then
        currentNominator = ''
        params.index = 2
        params.color = {1,1,1}
        params.font_color = {0,0,1}
        getObjectFromGUID(VOTE_PANEL_GUIDS[nominator]).editButton(params)
        clockControls.call('pointHand', {handGUID = BLUE_HAND_GUID, color = 'None'})
        if currentNominated ~= '' then
            params.index = 0
            params.color = {1,1,1}
            params.font_color = {1,0,0}
            getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominated]).editButton(params)
            currentNominated = ''
            clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = 'None'})
            clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = 'None'})
        end
        UI.setAttribute('colorSelection' .. playerMode,'active',false)
        colorTable = false
    else
        updatePlayers()
        if players[v] ~= nil then
            players[v].print(currentNominator .. ' is currently in the process of nominating a player. Please wait.', {1,0,0})
        end
    end
end

function nominated(params)
    local player = params.player
    local target = params.target
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    local buttonParams = {}

    if (player == currentNominator or player == 'Black') and canBeNominated[target] then
        if currentNominated == '' then
            currentNominated = target
            buttonParams.index = 0
            buttonParams.color = {1,0,0}
            buttonParams.font_color = {1,1,1}
            getObjectFromGUID(VOTE_PANEL_GUIDS[target]).editButton(buttonParams)
            clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = target})
            clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = target})
        elseif currentNominated == target then
            currentNominated = ''
            buttonParams.index = 0
            buttonParams.color = {1,1,1}
            buttonParams.font_color = {1,0,0}
            getObjectFromGUID(VOTE_PANEL_GUIDS[target]).editButton(buttonParams)
            clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = 'None'})
            clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = 'None'})
        else
            buttonParams.index = 0
            buttonParams.color = {1,1,1}
            buttonParams.font_color = {1,0,0}
            getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominated]).editButton(buttonParams)
            currentNominated = target
            buttonParams.color = {1,0,0}
            buttonParams.font_color = {1,1,1}
            getObjectFromGUID(VOTE_PANEL_GUIDS[target]).editButton(buttonParams)
            clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = target})
            clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = target})
        end
    end
end

function resetCurrentNominations()
    local buttonParams = {}
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)

    if currentNominator ~= '' and canNominate[currentNominator] == true then
        buttonParams.index = 2
        buttonParams.color = {1,1,1}
        buttonParams.font_color = {0,0,1}
        getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominator]).editButton(buttonParams)
    end
    if currentNominated ~= '' and canBeNominated[currentNominated] == true then
        buttonParams.index = 0
        buttonParams.color = {1,1,1}
        buttonParams.font_color = {1,0,0}
        getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominated]).editButton(buttonParams)
    end
    currentNominator = ''
    currentNominated = ''
    clockControls.call('pointHand', {handGUID = BLUE_HAND_GUID, color = 'None'})
    clockControls.call('pointHand', {handGUID = RED_HAND_GUID, color = 'None'})
    clockControls.call('pointHand', {handGUID = PURPLE_HAND_GUID, color = 'None'})
end

function checkLiving()
    for k,v in pairs(COLORS_ALL) do
        if aliveTokens[v].object ~= 0 then
            if aliveTokens[v].object.is_face_down == true then -- if life token is face down...
                living[v] = false
                if aliveTokens[v].vote ~= 0 then -- ..then if a vote token is present
                    hasVote[v] = true
                else
                    hasVote[v] = false
                end
            else
                hasVote[v] = true
                living[v] = true
            end
        end
    end
end

function hideVoteButtons()
    local votePanel
    for k,v in pairs(VOTE_PANEL_GUIDS) do
        votePanel = getObjectFromGUID(v)
        votePanel.clearButtons()
    end
    for k,v in pairs(COLORS_ALL) do
        voteButtonsOn[v] = false
    end
end

function showVoteButtons(params)
    local voteMode = params.voteMode
    local votePanel
    local buttonParams = {}
    currentNominator = ''
    currentNominated = ''
    checkLiving()
    updatePlayers()
    for k,v in pairs(COLORS_ALL) do
        if aliveTokens[v].object ~= 0 then
            votePanel = getObjectFromGUID(VOTE_PANEL_GUIDS[v])
            votePanel.call('createButtons')
            voteButtonsOn[v] = true
            canNominate[v] = true
            canBeNominated[v] = true
            voted[v] = false

            if voteMode == 'execution' then
                if not living[v] then
                    buttonParams.color = {0,0,0}
                    buttonParams.font_color = {0,0,0}
                    buttonParams.index = 2
                    getObjectFromGUID(VOTE_PANEL_GUIDS[v]).editButton(buttonParams)
                    canNominate[v] = false
                end
                if not hasVote[v] then
                    buttonParams.color = {0,0,0}
                    buttonParams.font_color = {0,0,0}
                    buttonParams.index = 1
                    getObjectFromGUID(VOTE_PANEL_GUIDS[v]).editButton(buttonParams)
                end
            end
        else
            voteButtonsOn[v] = false
        end
    end
end

function updateVoteResults(params)
    local vM = params.voteMode
    local numVotes = 0
    local nominationString = '[888888]Nomination: ' .. COLORS_BBC[currentNominator] .. currentNominator .. ' [888888]> ' .. COLORS_BBC[currentNominated] .. currentNominated .. '[-]\n'
    local voterString = '[888888]Voters:[-]'
    local actionStr

    if vM == 'execution' then
        actionStr = 'execute'
    else
        actionStr = 'exile'
    end

    for k,v in pairs(COLORS_ALL) do
        if voted[v] then
            numVotes = numVotes + 1
            voterString = voterString .. ' ' .. COLORS_BBC[v] .. v .. '[-]'
        end
    end
    if numVotes == 1 then
        broadcastToAll('Votes are in! '.. numVotes ..' player voted to '.. actionStr .. ' ' .. currentNominated ..'!', {1,0,0})
    else
        broadcastToAll('Votes are in! '.. numVotes ..' players voted to '.. actionStr .. ' ' .. currentNominated ..'!', {1,0,0})
    end
    if numVotes == 0 then
        voterString = '[888888]Voters: None[-]'
    end
    broadcastToAll(voterString, {1,1,1})
    history = history .. '\n' .. nominationString .. voterString .. '\n'
    setNotes(nominationString .. voterString)

    updateNominations()
    resetVotes({voteMode = vM})
end

function updateNominations()
    canNominate[currentNominator] = false
    canBeNominated[currentNominated] = false
    local buttonParams = {}
    buttonParams.color = {0,0,0}
    buttonParams.font_color = {0,0,0}
    buttonParams.index = 2
    if currentNominator ~= '' then
        getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominator]).editButton(buttonParams)
    end
    buttonParams.index = 0
    if currentNominated ~= '' then
        getObjectFromGUID(VOTE_PANEL_GUIDS[currentNominated]).editButton(buttonParams)
    end
    currentNominator = ''
    currentNominated = ''
    for k,v in pairs(COLORS_ALL) do
        if voted[v] and not living[v] then
            hasVote[v] = false
        end
    end
end

function resetVotes(params)
    local buttonParams = {}
    local handObj
    local colors
    if playerMode == 'p10' then
        colors = COLORS
    elseif playerMode == 'p15' then
        colors = COLORS_15
    elseif playerMode == 'p20' then
        colors = COLORS_ALL
    end
    for k,v in pairs(colors) do
        if players[v] ~= nil and voteButtonsOn[v] then
            if hasVote[v] or params.voteMode == 'exile' then
                buttonParams.color = {1,1,1}
                buttonParams.font_color = {0,0,0}
                buttonParams.index = 1
                getObjectFromGUID(VOTE_PANEL_GUIDS[v]).editButton(buttonParams)
                voteLock[v] = false
            else
                buttonParams.color = {0,0,0}
                buttonParams.font_color = {0,0,0}
                buttonParams.index = 1
                getObjectFromGUID(VOTE_PANEL_GUIDS[v]).editButton(buttonParams)
                voteLock[v] = true
            end
        else
            voteLock[v] = false
        end
        voted[v] = false
    end
    hideVotehands()
end

function hideVotehands()
    local handObj
    local colors
    if playerMode == 'p10' then
        colors = COLORS
    elseif playerMode == 'p15' then
        colors = COLORS_15
    elseif playerMode == 'p20' then
        colors = COLORS_ALL
    end

    for k,v in pairs(colors) do
        handObj = getObjectFromGUID(VOTEHAND_GUIDS[v])
        handObj.setScale({0,1,0})
        handObj.setPosition(PARAMS[playerMode].VOTEHAND_HIDE_POS[v])
    end
end

function updatePlayers()
    local allPlayers = Player.getPlayers()
    local found
    local textObj

    for k,v in pairs(COLORS) do
        if Player[v].seated then
            players[v] = Player[v]
        else
            players[v] = nil
        end
    end
    if Player['Black'].seated then
        players['Black'] = Player['Black']
    else
        players['Black'] = nil
    end

    for k,v in pairs(COLORS_EX) do
        if playersExIds[v] == nil then    --no id for that color
            playersEx[v] = nil
        else
            found = nil
            for k1,v1 in pairs(allPlayers) do
                if v1.steam_id == playersExIds[v] and v1.color == 'Grey' then
                    found = v1
                    break
                end
            end
            if found == nil then        --cannot find player with that id
                playersExIds[v] = nil
                playersEx[v] = nil
                textObj = getObjectFromGUID(TEXT_GUIDS[v])
                textObj.setValue('')
                deleteAvatar(v)
            else
                playersEx[v] = found
            end
        end
        players[v] = playersEx[v]
    end
    return players
end

function shufflePlayers()
    if started then
        return
    end
    local colorTab = {}
    local playerTab = {}
    local allPlayers
    for k,v in pairs(COLORS) do
        if players[v] ~= nil then
            table.insert(colorTab, v)
            table.insert(playerTab, players[v].steam_id)
            players[v].changeColor('Grey')
        end
    end
    for k,v in pairs(COLORS_EX) do
        if players[v] ~= nil then
            table.insert(colorTab, v)
            table.insert(playerTab, players[v].steam_id)
            sitUI(players[v], _, v)
        end
    end
    if playerTab == nil then
        return
    end
    playerTab = shuffleTable(playerTab)
    allPlayers = Player.getPlayers()

    for k,v in pairs(colorTab) do
        for k1,v1 in pairs(allPlayers) do
            if v1.steam_id == playerTab[k] then
                if inTable(v, COLORS) then
                    v1.changeColor(v)
                else
                    sitUI(v1, _, v)
                end
                break
                print('found')
            end
        end
    end
end

function shuffleTable(tab)
    local rand
    if tab == nil then
        return nil
    end

    for i = #tab, 1, -1 do
        rand = math.random(1,i)
        tab[i], tab[rand] = tab[rand], tab[i]
    end
    return tab
end

------------------Grey UI
function sitUI(player, value, id)
    local textObj
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    local seatLock = clockControls.getVar('seatLock')
    local zoneObj
    local color = string.sub(id, 4, #id)
    updatePlayers()
    if playersEx[color] == nil then
        for k,v in pairs(playersEx) do
            if v ~= nil and v.steam_id == player.steam_id then
                player.print('You are already sitting in a seat.')
                return
            end
        end
        if seatLock then
            player.print('Extension seats are locked.')
            return
        end
        player.print('You are now sitting in ' .. color .. '.')
        playersExIds[color] = player.steam_id
        playersEx[color] = player
        textObj = getObjectFromGUID(TEXT_GUIDS[color])
        textObj.setValue(player.steam_name)
        generateAvatar(color)
        printToAll(COLORS_BBC[color] .. player.steam_name .. ' is color ' .. color .. '.[-]')
        UI.setAttribute(id, 'text', 'Leave ' .. color)
        UI.setAttribute(id, 'textColor', '#FFFFFF')
        zoneObj = getObjectFromGUID(ZONE_GUIDS[color])
        zoneObj.setColorTint(COLORS_RGB[color])
    else
        if player.steam_id == playersEx[color].steam_id then
            player.print('You are no longer sitting in ' .. color .. '.')
            UI.setAttribute(id, 'text', 'Sit in ' .. color)
            UI.setAttribute(id, 'textColor', '#FFFFFF')
            playersEx[color] = nil
            playersExIds[color] = nil
            textObj = getObjectFromGUID(TEXT_GUIDS[color])
            textObj.setValue(' ')
            deleteAvatar(color)
            if started then
                zoneObj = getObjectFromGUID(ZONE_GUIDS[color])
                zoneObj.setColorTint({0.69,0.69,0.69})
            end
        else
            player.print('Someone is already sitting in ' .. color .. '.')
        end
    end
end

function generateAvatar(color)
    local objParam = {
        type = "Custom_Model",
        position = PARAMS[playerMode].AVATAR_POS[color],
        rotation = PARAMS[playerMode].AVATAR_ROT[color],
        scale = {2.5, 2.5, 2.5},
        callback = "avatarCallback",
        sound = false
    }
    local obj
    if avatarGuids[color] then
        obj = getObjectFromGUID(avatarGuids[color])
        obj.destruct()
    end
    generateAvatarImageUrl(playersEx[color].steam_id)
    Wait.time(function()
        local avatar = spawnObject(objParam)
        avatar.setLock(true)
        avatar.setDescription(color .. " Avatar")
        avatar.interactable = false
        local customParam = {
            diffuse = avatarUrl,
            mesh = "http://cloud-3.steamusercontent.com/ugc/933813375177509684/900B7683E01C43C394C408BC38E034B305F1B3AA/",
            collider = "http://cloud-3.steamusercontent.com/ugc/487893695356616224/E3E39A827C062914E4185D8757A81D4D14892B8B/",
            type = 0,
            material = 3,
            cast_shadows = false
        }
        avatar.setCustomObject(customParam)
        light = getObjectFromGUID(LIGHT_GUIDS[color])
        light.call('power')
    end, 0.5)
end

function avatarCallback(objIn, paramsIn)
	local color = string.gsub(objIn.getDescription(), " Avatar", "")
	avatarGuids[color] = objIn.getGUID()
end

function generateAvatarImageUrl(steamId)
    local url = 'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=E05421C6A86CAABADE2F700F492FFA4A&steamids=' .. steamId
    WebRequest.get(url, self, 'avatarUrlCB')
end

function avatarUrlCB(req)
    if req.is_done and not req.is_error then
        local response = JSON.decode(req.text)
        avatarUrl = response.response.players[1].avatarfull
    end
end

function deleteAvatar(color)
    if avatarGuids[color] then
        obj = getObjectFromGUID(avatarGuids[color])
        obj.destruct()
        avatarGuids[color] = nil
        light = getObjectFromGUID(LIGHT_GUIDS[color])
        light.call('power')
    end
end

function colorSitUI(player, value, id)
	uiColor = value
end

function voteUI(player, value, id)
    local found = false
    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end
    if not found then
        return
    end
    local clock = getObjectFromGUID(CLOCK_GUID)
    local scale = clock.getScale()
    if scale.x == 0 then
        return
    end

    local callParams = {}
    callParams.voter = found
    vote(callParams)
end

function nominatedDropdown(player, value, id)
    local found = false
    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end

    if not found or found ~= currentNominator then
        return
    end

	if (colorTable) then --colorSelection is visible
		UI.setAttribute('colorSelection' .. playerMode,'active',false)
		colorTable = false
	else --colorSelection is NOT visible
		UI.setAttribute('colorSelection' .. playerMode,'active',true)
		colorTable = true
	end
end

function nominateUI(player, value, id)
    local found = false
    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end
    if not found then
        return
    end
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    local rotating = clockControls.getVar('rotating')
    if rotating then
        return
    end

    local callParams = {}
    callParams.nominator = found
    nominate(callParams)
end

function nominatedUI(player, value, id)
    local found = false
    local target = UI.getAttribute(id, 'text')

    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end

    if not found then
        return
    end
    local clockControls = getObjectFromGUID(CLOCK_CONTROLS_GUID)
    local rotating = clockControls.getVar('rotating')
    if rotating then
        return
    end
    updatePlayers()
    if players[target] == nil or found ~= currentNominator then
        return
    end
    local callParams = {}
    callParams.player = found
    callParams.target = target
    nominated(callParams)
    UI.setAttribute('colorSelection' .. playerMode,'active',false)
    colorTable = false
end

function joinTeamUI(player, value, id)
    local found = false
    for k,v in pairs(playersEx) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end
    if not found then
        return
    end
    local teamTool = getObjectFromGUID(TEAM_TOOL_GUID)
    local params = {color = found, team = id}
    teamTool.call('joinTeamUI', params)
end

function leaveTeamUI(player, value, id)
    local teamTool = getObjectFromGUID(TEAM_TOOL_GUID)
    local jokersDefault = teamTool.getVar('jokersDefault')
    local defaultTeam

    if jokersDefault then
        defaultTeam = 'Jokers'
    else
        defaultTeam = 'None'
    end

    if player.team ~= defaultTeam then
        player.team = defaultTeam
        local teamTool = getObjectFromGUID(TEAM_TOOL_GUID)
        teamTool.call('refreshUI')
    end
end

function showExtensionUI()
    UI.setAttribute('placeDecalTB', 'active', 'false')
    UI.setAttribute('placeDecalBM', 'active', 'false')
    UI.setAttribute('placeDecalSV', 'active', 'false')
    UI.setAttribute('placeDecalCU', 'active', 'false')
    UI.setAttribute('placeDecal'.. mode, 'active', 'true')
    UI.setAttribute('decalText', 'active', 'true')
    if playerMode == 'p10' then
        UI.setAttribute('sit15', 'active', 'false')
        UI.setAttribute('sit20', 'active', 'false')
        UI.setAttribute('teamMenu', 'active', 'false')
        UI.setAttribute('leaveTeam', 'active', 'false')
        UI.setAttribute('blackMessage15', 'active', 'false')
        UI.setAttribute('blackMessage20', 'active', 'false')
    elseif playerMode == 'p15' then
        UI.setAttribute('sit15', 'active', 'true')
        UI.setAttribute('sit20', 'active', 'false')
        UI.setAttribute('teamMenu', 'active', 'true')
        UI.setAttribute('leaveTeam', 'active', 'true')
        UI.setAttribute('blackMessage15', 'active', 'true')
        UI.setAttribute('blackMessage20', 'active', 'false')
    elseif playerMode == 'p20' then
        UI.setAttribute('sit15', 'active', 'false')
        UI.setAttribute('sit20', 'active', 'true')
        UI.setAttribute('teamMenu', 'active', 'true')
        UI.setAttribute('leaveTeam', 'active', 'true')
        UI.setAttribute('blackMessage15', 'active', 'false')
        UI.setAttribute('blackMessage20', 'active', 'true')
    end
end

function messageInputUI(player, value, id)
    uiMsg = value
end

function sendMessageUI(blackPlayer, value, id)
    updatePlayers()
    local player = players[uiColor]
    if player ~= nil then
        local msg = COLORS_BBC[uiColor] .. '<' .. uiColor .. '>[-] [000000]' .. blackPlayer.steam_name .. ':[-] ' .. uiMsg
        player.print(msg)
        blackPlayer.print(msg)
    else
        blackPlayer.print('Nobody is sitting in ' .. uiColor .. '.', {1,0,0})
    end
end

function decalUI(player, value, id)
    updatePlayers()
    local found = false
    local params = {}
    local tableObj = getObjectFromGUID('8e1176')
    for k,v in pairs(players) do
        if v ~= nil and v.steam_id == player.steam_id then
            found = k
        end
    end
    if not found then
        return
    end
    local globalDecals = Global.getDecals()
    if globalDecals ~= nil then
        for i = #globalDecals,1,-1 do
            if math.abs(globalDecals[i].position[1] - PARAMS[playerMode].DECAL_POS[found][1]) < 0.01 and math.abs(globalDecals[i].position[3] - PARAMS[playerMode].DECAL_POS[found][3]) < 0.01 then
                table.remove(globalDecals,i)
            end
        end
        Global.setDecals({})
        Global.setDecals(globalDecals)
    end
    if value ~= "None" then
        params.name = value
        params.url = DECAL_URLS[value]
        params.position = PARAMS[playerMode].DECAL_POS[found]
        params.rotation = PARAMS[playerMode].DECAL_ROT[found]
        params.scale = {8,8,8}
        Global.addDecal(params)
    end
end
