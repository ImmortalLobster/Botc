--[[
Character Tool
Made by Sionar
--]]


------------------Constants
VERSION = '1.2.0'
START_POS = {21,1.2,145}
COLORS_ALL = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
COLORS_BBC = {White = '[FFFFFF]', Brown = '[703A16]', Red = '[DA1917]', Orange = '[F3631C]', Yellow = '[E6E42B]', Green = '[30B22A]', Teal = '[20B09A]', Blue = '[1E87FF]', Purple = '[9F1FEF]', Pink = '[F46FCD]', Magenta = '[FF007F]', Lavender = '[967BB6]', Navy = '[616BD4]', Cyan = '[49D5FD]', Mint = '[89C381]', Lime = '[B8F161]', Peach = '[F1D4A2]', Coral = '[E29A8A]', Maroon = '[800000]', Silver = '[BEBEBE]', Black = '[3F3F3F]', Grey = '[AAAAAA]'}

#include GUIDs.ttslua


------------------Variables
nameList = {}
colors = {}
angles = {}
numPlayers = 0
tableSize = 5


------------------Functions()
function onLoad()
    moveBoard()
    renderSetup()
    self.setDescription('v ' .. VERSION .. '\nMade by Sionar')
end

function moveBoard()
    local modName = Global.getVar('MOD_NAME')
    if modName == 'Blood on the Clocktower' then
        self.setPositionSmooth(START_POS)
        self.setLock(true)
    end
end

function updateList(obj, color, input, stillEditing)
    if not stillEditing then
        nameList = {}
        local entry
        for s in input:gmatch("[^\r\n]+") do
            entry = s
            table.insert(nameList, entry)
        end
    end
end

function start(clickedObject, playerColor)
    local obj
    local numPlayers, rad, radGrim
    local posTable, posTableGrim
    local started = Global.getVar('started')

    if #nameList < 5 then
        Player[playerColor].print('Error: Not enough names in the list.', {1,0,0})
        return
    elseif #nameList > 20 then
        Player[playerColor].print('Error: Too many names in the list.', {1,0,0})
        return
    end

    Global.setVar('storytellerMode', true)
    tableSize = #nameList
    obj = getObjectFromGUID(TABLE_SIZER_GUID)
    obj.setVar('tableSize', tableSize)
    obj.call('refreshUI')
    obj.call('callResize')

    storageBag = getObjectFromGUID(STORAGE_BAG_GUID)
    numPlayers = #nameList
    rad = numPlayers * 0.6 + 6
    radGrim = numPlayers * 0.4 + 6

    colors = {}
    angles = {}
    posTable = {}
    posTableGrim = {}

    for i = 1, numPlayers do
        table.insert(colors, COLORS_ALL[i])
        angles[COLORS_ALL[i]] = (180 + 360 / numPlayers * (i-1)) % 360
    end

    for k,v in pairs(colors) do
        posTable[v] = radius(rad, angles[v], 1.5)
        posTable[v][3] = posTable[v][3] - 3
        posTableGrim[v] = radius(radGrim, angles[v], 1.5)
        posTableGrim[v][3] = posTableGrim[v][3] + 116.5
    end

    deleteOldText()
    for i = 1, numPlayers do
        obj = spawnObject({type = '3DText', position = posTable[colors[i]], rotation = {90,180,0}})
        obj.setValue(nameList[i])

        if started then
            obj = spawnObject({type = '3DText', position = posTableGrim[colors[i]], rotation = {90,180,0}})
            obj.setValue(nameList[i])
        end
    end
    renderStart()
end

function generateGrimNames()
    local numPlayers = #nameList
    local posTableGrim = {}
    local radGrim = numPlayers * 0.4 + 6

    for k,v in pairs(colors) do
        posTableGrim[v] = radius(radGrim, angles[v], 1.5)
        posTableGrim[v][3] = posTableGrim[v][3] + 116.5
    end

    for i = 1, numPlayers do
        obj = spawnObject({type = '3DText', position = posTableGrim[colors[i]], rotation = {90,180,0}})
        obj.setValue(nameList[i])
    end
end

function deleteOldText()
    local allObjs = getAllObjects()
    for k,v in pairs(allObjs) do
        if v.tag == '3D Text' then
            v.destruct()
        end
    end
end

function radius(rad, angle, height)
    return {rad*math.sin(angle*math.pi/180), height, rad*math.cos(angle*math.pi/180)}
end

function renderSetup()
    self.clearButtons()
    self.clearInputs()
    self.createInput({
        input_function = 'updateList',
        function_owner = self,
        label = 'Generate a Town Square for storytelling.\nEnter the name of each player, one name per line.',
        width = 4000,
        height = 6000,
        font_size = 250,
        color = {0.2,0.2,0.2},
        font_color = {1,1,1},
        alignment = 3,
    })
    self.createButton({
        click_function = 'nullFunc',
        function_owner = self,
        label = 'Town Square Generator',
        position = {0,0.2,-7.5},
        width = 0,
        height = 0,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {1,1,1},
    })

    self.createButton({
        click_function = 'start',
        function_owner = self,
        label = 'Start',
        position = {0,0.2,7.5},
        width = 1300,
        height = 500,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {0,0,0},
    })
end

function renderStart()
    self.clearButtons()
    self.clearInputs()

    self.createButton({
        click_function = 'nullFunc',
        function_owner = self,
        label = 'Town Square',
        position = {0,0.2,-7.5},
        width = 0,
        height = 0,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {1,1,1},
    })

    local z = -6
    for i,v in ipairs(nameList) do
        self.createButton({
            click_function = 'nullFunc',
            function_owner = self,
            label = COLORS_BBC[COLORS_ALL[i]] .. v .. '[-]',
            position = {0,0.2, z},
            width = 0,
            height = 0,
            font_size = 200,
            color = {1,1,1,1},
            font_color = {1,1,1},
        })
        z = z + 0.65
    end

end
