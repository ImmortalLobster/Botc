--[[
Custom Importer
Made by Sionar
--]]


------------------Constants
VERSION = '1.4.1'
Z_START = -8.5
Z_INC = 0.45
Z_INC_SMALL = 0.35
FONT_SIZE_LABEL = 200
FONT_SIZE_TEXT = 150
BUTTON_HEIGHT = 0.2
COLORS = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink'}
COLORS_EX = {'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
COLORS_15 = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Lavender', 'Navy', 'Lime', 'Coral', 'Maroon'}
COLORS_ALL = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
COLORS_DEAL10 = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Black', 'Table'}
COLORS_DEAL15 = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Lavender', 'Navy', 'Lime', 'Coral', 'Maroon', 'Black', 'Table'}
COLORS_DEAL20 = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver', 'Black', 'Table'}
COLORS_BBC = {Townsfolk = '[1E87FF]', Outsider = '[20B09A]', Minion = '[F3631C]', Demon = '[DA1917]', Traveler = '[30B22A]'}
ANGLE10 = {White = 45, Brown = 75, Red = 105, Orange = 135, Yellow = 165, Green = 195, Teal = 225, Blue = 255, Purple = 285, Pink = 315,}
ANGLE15 = {White = 40, Brown = 60, Red = 80, Orange = 100, Yellow = 120, Green = 140, Teal = 160, Blue = 180, Purple = 200, Pink = 220, Lavender = 240, Navy = 260, Lime = 280, Coral = 300, Maroon = 320}
ANGLE20 = {White = 37.5, Brown = 52.5, Red = 67.5, Orange = 82.5, Yellow = 97.5, Green = 112.5, Teal = 127.5, Blue = 142.5, Purple = 157.5, Pink = 172.5, Magenta = 187.5, Lavender = 202.5, Navy = 217.5, Cyan = 232.5, Mint = 247.5, Lime = 262.5, Peach = 277.5, Coral = 292.5, Maroon = 307.5, Silver = 322.5}
TYPES = {'Townsfolk', 'Outsider', 'Minion', 'Demon', 'Traveler'}
MODE_SELECTOR_GUID = '884de8'
REF_BLACK_GUID = '49ac3a'
REF_TABLE_GUID = 'b0105e'
CLONE10 = {}
CLONE15 = {}
CLONE20 = {}

function radius(rad, angle, height)
    return {rad*math.sin(angle*math.pi/180), height, rad*math.cos(angle*math.pi/180)}
end

for k,v in pairs(COLORS) do
    CLONE10[v] = {}
    CLONE10[v].pos = radius(71,ANGLE10[v], 1)
    CLONE10[v].rot = {0, ANGLE10[v], 0}
    CLONE10[v].scale = {0.6,0.6,0.6}
end

CLONE10['Black'] = {}
CLONE10['Table'] = {}
CLONE10['Black'].pos = {20, 1.2, 75}
CLONE10['Table'].pos = {0, 1.2, 34}
CLONE10['Black'].rot = {0,0,0}
CLONE10['Table'].rot = {0,180,0}
CLONE10['Black'].scale = {0.63,0.63,0.63}
CLONE10['Table'].scale = {1,1,1}

for k,v in pairs(COLORS_15) do
    CLONE15[v] = {}
    CLONE15[v].pos = radius(71,ANGLE15[v], 1)
    CLONE15[v].rot = {0, ANGLE15[v], 0}
    CLONE15[v].scale = {0.6,0.6,0.6}
end

CLONE15['Black'] = {}
CLONE15['Table'] = {}
CLONE15['Black'].pos = {20, 1.2, 75}
CLONE15['Table'].pos = {0, 1.2, 34}
CLONE15['Black'].rot = {0,0,0}
CLONE15['Table'].rot = {0,180,0}
CLONE15['Black'].scale = {0.63,0.63,0.63}
CLONE15['Table'].scale = {1,1,1}

for k,v in pairs(COLORS_ALL) do
    CLONE20[v] = {}
    CLONE20[v].pos = radius(71,ANGLE20[v], 1)
    CLONE20[v].rot = {0, ANGLE20[v], 0}
    CLONE20[v].scale = {0.6,0.6,0.6}
end

CLONE20['Black'] = {}
CLONE20['Table'] = {}
CLONE20['Black'].pos = {20, 1.2, 75}
CLONE20['Table'].pos = {0, 1.2, 34}
CLONE20['Black'].rot = {0,0,0}
CLONE20['Table'].rot = {0,180,0}
CLONE20['Black'].scale = {0.63,0.63,0.63}
CLONE20['Table'].scale = {1,1,1}


------------------Variables
characters = {}
found = {}
charAdd = ''
saveLists = {Save1 = {}, Save2 = {}, Save3 = {}, Save4 = {}}
saveNames = {'Save 1', 'Save 2', 'Save 3', 'Save 4'}
batchList = {}


------------------Functions
function onLoad(saveString)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        characters = save['c']
        saveLists = save['sl']
        saveNames = save['sn']
    end
    local customSet = Global.getVar('customSet')
    if customSet then
        characters = Global.getTable('customList')
    end

    refreshUI()
    moveBoard()
    self.setDescription('v ' .. VERSION )
end

function onSave()
    local save = {}
    save['c'] = characters
    save['sl'] = saveLists
    save['sn'] = saveNames
    local saveString = JSON.encode(save)
    return saveString
end

function moveBoard()
    local modName = Global.getVar('MOD_NAME')
    local customSet = Global.getVar('customSet')
    if modName == 'Blood on the Clocktower' and not customSet then
        self.setPositionSmooth({20,1.2,106})
        self.setRotationSmooth({0,0,0})
        self.setLock(true)
    end
end

function charInput(obj, color, input, stillEditing)
    if not stillEditing then
        for k,v in pairs(CHARACTERS) do
            if string.lower(k) == string.lower(input) and input ~= '' then
                charAdd = k
                break
            end
            if string.match(string.lower(k), string.lower(input)) and input ~= '' then
                charAdd = k
                break
            end
        end
        refreshUI()
        return 1
    end
end

function removeChar()
    if charAdd == '' then
        return
    end
    for k,v in pairs(characters) do
        if v == charAdd then
            table.remove(characters, k)
        end
    end
    refreshUI()
end

function addChar()
    if charAdd == '' then
        return
    end
    for k,v in pairs(characters) do
        if v == charAdd then
            return
        end
    end
    table.insert(characters, charAdd)
    refreshUI()
end

function clear()
    characters = {}
    refreshUI()
end

function import()
    local objs = getAllObjects()
	local params = {}
    local modeSelector = getObjectFromGUID(MODE_SELECTOR_GUID)

    Global.setVar('mode', 'CU')
    Global.setVar('customSet', true)
    Global.setTable('customList', characters)
    refreshUI()

    for k,v in pairs(objs) do
        if string.match(v.getName(), ': Townsfolk')
		or string.match(v.getName(), ': Outsiders')
		or string.match(v.getName(), ': Minions')
		or string.match(v.getName(), ': Demons')
		or string.match(v.getName(), ': Status Tokens')
		or string.match(v.getName(), ': Travelers')
		or string.match(v.getName(), ': Roles')
		or string.match(v.getName(), ': Reference') then
            if v.getStateId() ~= 4 then
                v.setState(4)
            end
        end
    end
    if modeSelector then
        params = {
            image = 'http://cloud-3.steamusercontent.com/ugc/797616701730417884/F3A30C6D96D5EFBD981451E8905B4526E0B4E34B/',
            type = 2,
            thickness = 0.10,
        }
        modeSelector.setCustomObject(params)
        modeSelector.reload()
    end
    Wait.time(destroyObjects, 2)
end

function destroyObjects()
    local allObjects = getAllObjects()
    local objTable, numObjects
    local bags = {}
    local takeObj, obj
    local found = false
    local name, idx
    local dealColors, cloneTable
    local playerMode = Global.getVar('playerMode')

    for k,v in pairs(allObjects) do
        if string.match(v.getName(), ': Townsfolk') then
            table.insert(bags, v)
        elseif string.match(v.getName(), ': Outsiders') then
            table.insert(bags, v)
        elseif string.match(v.getName(), ': Minions') then
            table.insert(bags, v)
        elseif string.match(v.getName(), ': Demons') then
            table.insert(bags, v)
        elseif string.match(v.getName(), ': Roles') then
            v.destruct()
        end
    end
    for k1,v1 in pairs(bags) do
        numObjects = v1.getQuantity()
        objTable = v1.getObjects()

        for i = numObjects,1,-1 do
            found = false
            name = string.gsub(objTable[i].name, ' ', '_')
            for k,v in pairs(characters) do
                if name == v then
                    found = true
                end
            end
            if not found then
                idx = objTable[i].index
                takeObj = v1.takeObject({index = idx})
                takeObj.destruct()
            end
        end
    end

    obj = getObjectFromGUID(REF_BLACK_GUID)
    if obj then
        obj.destruct()
    end
    obj = getObjectFromGUID(REF_TABLE_GUID)
    if obj then
        obj.destruct()
    end
    if playerMode == 'p10' then
        dealColors = COLORS_DEAL10
        cloneTable = CLONE10
    elseif playerMode == 'p15' then
        dealColors = COLORS_DEAL15
        cloneTable = CLONE15
    elseif playerMode == 'p20' then
        dealColors = COLORS_DEAL20
        cloneTable = CLONE20
    end

    for k,v in pairs(dealColors) do
        obj = self.clone()
        obj.setName('Custom Role List')
        obj.setPositionSmooth(cloneTable[v].pos)
        obj.setRotationSmooth(cloneTable[v].rot)
        obj.setScale(cloneTable[v].scale)
        obj.setLock(true)
    end
    self.destruct()
end

function setSaveName(obj, color, input, stillEditing, index)
    if not stillEditing then
        saveNames[index] = input
        saveLoadMenu()
        return 1
    end
end

function save(clickedObject, playerColor, index)
    saveLists['Save'..index] = characters
    Player[playerColor].print('Current character list saved to slot ' .. index .. '.')
    saveLoadMenu()
end

function load(clickedObject, playerColor, index)
    characters = saveLists['Save'..index]
    Player[playerColor].print('Character list ' .. saveNames[index] .. ' loaded.')
    refreshUI()
end

for k = 1,4 do
    _G['setSaveName' .. k] = function(obj, col, input, editing)
        setSaveName(obj, col, input, editing, k)
    end
    _G['save' .. k] = function(obj, col)
        save(obj, col, k)
    end
    _G['load' .. k] = function(obj, col)
        load(obj, col, k)
    end
end

function saveLoadMenu()
    self.clearButtons()
    self.clearInputs()

    buttonParam = {click_function = 'nullFunc', label = "Save or Load Custom Lists", color = BUTT_B_COLOR, font_color = stringColorToRGB('White'), function_owner = self,
        position = {0,BUTTON_HEIGHT,-6}, rotation = {0,0,0}, width = 0, height = 0, font_size = 400}
    self.createButton(buttonParam)

    inputParam = {input_function = 'setSaveName1', color = stringColorToRGB('Red'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-3.2,BUTTON_HEIGHT,-4}, rotation = {0,0,0}, width = 2400, height = 350, font_size = 300, value = saveNames[1], alignment = 3, validation = 1, tab = 2}
    self.createInput(inputParam)

    inputParam = {input_function = 'setSaveName2', color = stringColorToRGB('Blue'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
        position = {3.2,BUTTON_HEIGHT,-4}, rotation = {0,0,0}, width = 2400, height = 350, font_size = 300, value = saveNames[2], alignment = 3, validation = 1, tab = 2}
    self.createInput(inputParam)

    inputParam = {input_function = 'setSaveName3', color = stringColorToRGB('Green'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
        position = {-3.2,BUTTON_HEIGHT,0.8}, rotation = {0,0,0}, width = 2400, height = 350, font_size = 300, value = saveNames[3], alignment = 3, validation = 1, tab = 2}
    self.createInput(inputParam)

    inputParam = {input_function = 'setSaveName4', color = stringColorToRGB('Orange'), function_owner = self, font_color = stringColorToRGB('White'), function_owner = self,
        position = {3.2,BUTTON_HEIGHT,0.8}, rotation = {0,0,0}, width = 2400, height = 350, font_size = 300, value = saveNames[4], alignment = 3, validation = 1, tab = 2}
    self.createInput(inputParam)

    buttonParam = {click_function = 'save1', label = "Save", color = stringColorToRGB('Red'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {-4.4,BUTTON_HEIGHT,-2.4}, rotation = {0,0,0}, width = 1000, height = 600, font_size = 320}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'save2', label = "Save", color = stringColorToRGB('Blue'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {2,BUTTON_HEIGHT,-2.4}, rotation = {0,0,0}, width = 1000, height = 600, font_size = 320}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'save3', label = "Save", color = stringColorToRGB('Green'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {-4.4,BUTTON_HEIGHT,2.4}, rotation = {0,0,0}, width = 1000, height = 600, font_size = 320}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'save4', label = "Save", color = stringColorToRGB('Orange'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {2,BUTTON_HEIGHT,2.4}, rotation = {0,0,0}, width = 1000, height = 600, font_size = 320}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'load1', label = "Load", color = stringColorToRGB('Red'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {-2,BUTTON_HEIGHT,-2.4}, rotation = {0,0,0}, width = 1000, height = 600, font_size = 320}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'load2', label = "Load", color = stringColorToRGB('Blue'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {4.4,BUTTON_HEIGHT,-2.4}, rotation = {0,0,0}, width = 1000, height = 600, font_size = 320}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'load3', label = "Load", color = stringColorToRGB('Green'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {-2,BUTTON_HEIGHT,2.4}, rotation = {0,0,0}, width = 1000, height = 600, font_size = 320}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'load4', label = "Load", color = stringColorToRGB('Orange'), font_color = stringColorToRGB('White'), function_owner = self,
        position = {4.4,BUTTON_HEIGHT,2.4}, rotation = {0,0,0}, width = 1000, height = 600, font_size = 320}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'refreshUI', label = "Cancel", color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self,
        position = {0,BUTTON_HEIGHT,5.6}, rotation = {0,0,0}, width = 2000, height = 600, font_size = 320}
    self.createButton(buttonParam)
end

function batchImportMenu()
    self.clearButtons()
    self.clearInputs()
    self.createInput({
        input_function = 'updateBatchList',
        function_owner = self,
        label = 'Import a bunch of characters at once.\nOne character per line, no commas.',
        width = 4000,
        height = 6000,
        font_size = 200,
        color = {0.2,0.2,0.2},
        font_color = {1,1,1},
        alignment = 3,
    })
    self.createButton({
        click_function = 'nullFunc',
        function_owner = self,
        label = 'Batch Import',
        position = {0,BUTTON_HEIGHT,-7.5},
        width = 0,
        height = 0,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {1,1,1},
    })

    self.createButton({
        click_function = 'batchImport',
        function_owner = self,
        label = 'Load',
        position = {-2,BUTTON_HEIGHT,7.5},
        width = 1300,
        height = 500,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {0,0,0},
    })

    self.createButton({
        click_function = 'refreshUI',
        function_owner = self,
        label = 'Cancel',
        position = {2,BUTTON_HEIGHT,7.5},
        width = 1300,
        height = 500,
        font_size = 400,
        color = {1,1,1,1},
        font_color = {0,0,0},
    })
end

function updateBatchList(obj, color, input, stillEditing)
    if not stillEditing then
        batchList = {}
        local entry
        for s in input:gmatch("[^\r\n]+") do
            entry = string.gsub(s,' ', '_')
            table.insert(batchList, entry)
        end
    end
end

function batchImport()
    characters = {}
    for k,v in pairs(batchList) do
        if matchesKey(v, CHARACTERS) then
            table.insert(characters,v)
        end
    end
    refreshUI()
end

function matchesKey(value, table)
    for k,v in pairs(table) do
        if value == k then
            return true
        end
    end
    return false
end

function refreshUI()
    self.clearButtons()
    self.clearInputs()
    local params
    local charLabel
    local customSet = Global.getVar('customSet')
    local z = Z_START
    local z_inc

    if #characters < 26 then
        z_inc = Z_INC
    else
        z_inc = Z_INC_SMALL
    end

    if not customSet then
        params = {input_function = 'charInput', position = {-4, BUTTON_HEIGHT, 7.8}, width = 1600, height = 250, font_size = 200, value = charAdd, label = 'Character', color = stringColorToRGB('White'), function_owner = self, font_color = {0,0,0}, function_owner = self, rotation = {0,0,0}, alignment = 3, validation = 1, tab = 2}
        self.createInput(params)

        params = {click_function = 'removeChar', label = 'Remove', position = {-5, BUTTON_HEIGHT, 8.5}, width = 800, height = 300, font_size = 200, color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, rotation = {0,0,0}, tooltip = 'Remove character from game'}
        self.createButton(params)

        params = {click_function = 'addChar', label = 'Add', position = {-3, BUTTON_HEIGHT, 8.5}, width = 800, height = 300, font_size = 200, color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, rotation = {0,0,0}, tooltip = 'Add character to game'}
        self.createButton(params)

        params = {click_function = 'clear', label = 'Clear\nList', position = {0, BUTTON_HEIGHT, 8}, width = 900, height = 500, font_size = 200, color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, rotation = {0,0,0}, tooltip = 'Clear custom list'}
        self.createButton(params)

        params = {click_function = 'batchImportMenu', label = 'Batch\nImport', position = {2, BUTTON_HEIGHT, 8}, width = 900, height = 500, font_size = 200, color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, rotation = {0,0,0}, tooltip = 'Import a batch of characters at once'}
        self.createButton(params)

        params = {click_function = 'saveLoadMenu', label = 'Load/Save\nLists', position = {4, BUTTON_HEIGHT, 8}, width = 900, height = 500, font_size = 150, color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, rotation = {0,0,0}, tooltip = 'Open the save/load menu'}
        self.createButton(params)

        params = {click_function = 'import', label = 'Import\nTo Game', position = {6, BUTTON_HEIGHT, 8}, width = 900, height = 500, font_size = 200, color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, rotation = {0,0,0}, tooltip = 'Import list to game'}
        self.createButton(params)
    else
        z = z + z_inc * 2
    end

    for k,v in pairs(TYPES) do
        found[v] = false
    end

    for k,v in pairs(characters) do
        found[CHARACTERS[v].Type] = true
    end

    for k,v in pairs(TYPES) do
        if found[v] then
            params = {click_function = 'nullFunc', label = COLORS_BBC[v] .. v, color = {1,1,1,1}, function_owner = self,
                position = {0,BUTTON_HEIGHT,z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE_LABEL,}
            self.createButton(params)
            z = z + z_inc * 1.5
        end

        for k1,v1 in pairs(characters) do
            if CHARACTERS[v1].Type == v then
                charLabel = string.gsub(v1, '_', ' ')
                params = {click_function = 'nullFunc', color = {1,1,1,1}, function_owner = self,
                    position = {0,BUTTON_HEIGHT,z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE_TEXT,}
                params.label = COLORS_BBC[CHARACTERS[v1].Type] .. charLabel .. '[FFFFFF] - ' .. CHARACTERS[v1].Description .. '[-]'
                self.createButton(params)
                z = z + z_inc
            end
        end
        z = z + z_inc
    end
end
