--[[
Night Tool
Made by Sionar
--]]


------------------Constants
VERSION = '1.6.2'
ROW_S = -6.3
ROW_W = 0.45
FONT_SIZE = 225
FONT_SIZE_LABEL = 360
BUTTON_SIZE = 270
BUTTON_Y = 0.1
COLUMN = {-3.6, -1.35, -0.45, 3.6, 6.3}
ROW = {}
for i = 1,20 do
    ROW[i] = ROW_S + i * ROW_W
end
LIVING_LAB_Z = -6.75
NIGHT_LAB_Z = -6.75
PREVIEW_LAB_Z = 1.35
PREVIEW_MSG_Z = 2.7
ADDCHAR_LAB_X = -4.95
ADDCHAR_LAB_Z = 3.6
ADD_BUT_X = -1.9
INPUTS_X = {-6.6, -3.45, 0.3, 3.6, 6.9}
INPUTS_LAB_Z = 4.275
INPUT_BUT_Z = 4.95
BOTTOM_BUT_X = {-4.05, -1.35, 1.35, 4.05}
BOTTOM_BUT_Z = 6.75

COLORS = {'White', 'Brown', 'Red', 'Orange', 'Yellow', 'Green', 'Teal', 'Blue', 'Purple', 'Pink', 'Magenta', 'Lavender', 'Navy', 'Cyan', 'Mint', 'Lime', 'Peach', 'Coral', 'Maroon', 'Silver'}
COLORS_BBC = {White = '[FFFFFF]', Brown = '[703A16]', Red = '[DA1917]', Orange = '[F3631C]', Yellow = '[E6E42B]', Green = '[30B22A]', Teal = '[20B09A]', Blue = '[1E87FF]', Purple = '[9F1FEF]', Pink = '[F46FCD]', Magenta = '[FF007F]', Lavender = '[967BB6]', Navy = '[000080]', Cyan = '[49D5FD]', Mint = '[89C381]', Lime = '[B8F161]', Peach = '[F1D4A2]', Coral = '[329A8A]', Maroon = '[800000]', Silver = '[BEBEBE]'}
COLORS_RGB = {White = {1,1,1}, Brown = {113/255,59/255,23/255}, Red = {219/255,26/255,24/255}, Orange = {244/255,100/255,29/255}, Yellow = {231/255,229/255,44/255}, Green = {49/255,179/255,43/255}, Teal = {33/255,177/255,155/255}, Blue = {31/255,136/255,255/255}, Purple = {160/255,32/255,240/255}, Pink = {245/255,112/255,206/255}, Magenta = {255/255,0/255,127/255}, Lavender = {150/255,123/255,182/255}, Navy = {0/255,0/255,128/255}, Cyan = {73/255,213/255,253/255}, Mint = {137/255,195/255,129/255}, Lime = {184/255,241/255,97/255}, Peach = {241/255,212/255,162/255}, Coral = {226/255,154/255,138/255}, Maroon = {128/255,0,0}, Silver = {190/255,190/255,190/255},}

START_POS = {x = 0, y = 1.11, z = 127}


------------------Variables
living = {}
order = {}
orderRef = nil
minionColors = {}
demonColor = nil
lastBlind = ''
blindAuto = true
abilityUsed = {}
for k,v in pairs(COLORS) do
    abilityUsed[v] = false
end

message = ''
roleAdd = ''
colorAdd = ''
currentMsg = ''
sendMsg = ''
evilMsg = ''
p1, p2, p3 = '', '', ''
dayNum = 0

------------------Load/save
function onLoad(saveString)
    moveBoard()
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        living = save['l']
        order = save['o']
        orderRef = save['r']
        demonColor = save['d']
        lastBlind = save['lb']
        blindAuto = save['b']
        abilityUsed = save['a']
        dayNum = save['day']
    end
    refreshUI()
    self.setDescription('v ' .. VERSION .. '\nMade by Sionar')
end

function onSave()
    local save = {}
    save['l'] = living
    save['o'] = order
    save['r'] = orderRef
    save['d'] = demonColor
    save['lb'] = lastBlind
    save['b'] = blindAuto
    save['a'] = abilityUsed
    save['day'] = dayNum
    local saveString = JSON.encode(save)
    return saveString
end


------------------Functions
function moveBoard()
    local global_name = Global.getVar('MOD_NAME')
    if global_name == 'Blood on the Clocktower Ex' then
        self.setPositionSmooth(START_POS)
        self.setLock(true)
    end
end

function import()
    local roles = Global.getTable('roles')
    local numRoles = 0
    for k,v in pairs(roles) do
        numRoles = numRoles + 1
    end
    if numRoles == 0 then
        return
    end
    local entry = {}
    living = {}
    minionColors = {}
    for k,v in pairs(roles) do
        playerRole = string.gsub(v, ' ', '_')
        entry = {color = k, role = playerRole}
        table.insert(living, entry)
        if CHARACTERS[playerRole].Type == 'Minion' then
            table.insert(minionColors, entry.color)
        elseif CHARACTERS[playerRole].Type == 'Demon' then
            demonColor = entry.color
        end
    end
    local minionStr = 'Minions:'
    for i = 1, #minionColors do
        minionStr = minionStr .. ' ' .. COLORS_BBC[minionColors[i]] .. minionColors[i] .. '[-]'
    end
    evilMsg = 'Demon: ' .. COLORS_BBC[demonColor] .. demonColor .. '[-], ' .. minionStr
    setNightOrder('first')
    setMsg()
end

function setNightOrder(night)
    order = {}
    local players = Global.call('updatePlayers')
    if blindAuto then
        if lastBlind ~= '' then
            players[lastBlind].blindfolded = true
            lastBlind = ''
        end
    end
    if night == 'first' then
        table.insert(order, {role = 'Evil_Info', color = 'White'})
        table.insert(order, {role = 'Demon_Info', color = demonColor})
        orderRef = FIRST
    else
        orderRef = OTHER
    end
    for k1,v1 in pairs(orderRef) do
        for k2,v2 in pairs(living) do
            if v2.role == v1 and v2.role ~= 'Ravenkeeper' and v2.role ~= 'Sage' and v2.role ~= 'Barber' then
                if CHARACTERS[v2.role].Ability == false or CHARACTERS[v2.role].Ability == true and abilityUsed[v2.color] == false then
                    table.insert(order, v2)
                    if v2.role == 'Lunatic' and night == 'first' then
                        table.insert(order, 1, {role = 'Lunatic_InfoA', color = v2.color})
                        table.insert(order, 2, {role = 'Lunatic_InfoB', color = v2.color})
                    end
                end
            end
        end
    end
    table.insert(order, {role = 'Next_Night', color = 'White'})
    setMsg()
end

function setMsg()
    if #order == 0 then
        currentMsg = ''
        sendMsg = ''
        refreshUI()
        return
    end
    local currentRole = order[1].role
    if currentRole == 'Evil_Info' then
        currentMsg = evilMsg
    elseif currentRole == 'Next_Night' then
        currentMsg = ''
    else
        currentMsg = CHARACTERS[currentRole].Prompt
    end
    sendMsg = removeUnder(currentMsg)
    refreshUI()
end

function getKey(table, value)
    for k,v in pairs(table) do
        if value == v then
            return k
        end
    end
    return nil
end

function inTable(table, value)
    for k,v in pairs(table) do
        if v == value then
            return true
        end
    end
    return false
end

function used(clickedObject, playerColor, i)
    local entry = living[i]
    abilityUsed[living[i].color] = not abilityUsed[living[i].color]
    if CHARACTERS[living[i].role].Ability == true and abilityUsed[living[i].color] == true then
        for k,v in pairs(order) do
            if living[i].role == v.role then
                table.remove(order, k)
            end
        end
    end
    setMsg()
end

for k = 1,20 do
    _G['used' .. k] = function(obj, col)
        used(obj, col, k)
    end
end

function remove(clickedObject, playerColor, i)
    local entry = living[i]
    table.remove(living, i)
    if entry.role == 'Ravenkeeper' or entry.role == 'Sage' or entry.role == 'Barber' then
        if orderRef ~= nil then
            orderIndex = getKey(orderRef, entry.role)
            if orderIndex == nil then
                refreshUI()
                return
            end
            for i = 1, #order do
                if orderIndex < getKey(orderRef, order[i].role) then
                    orderPos = i
                    break
                end
            end
            if orderPos == nil then
                orderPos = #order + 1
            end
            if entry.role == 'Barber' then
                entry.color = demonColor
            end
            table.insert(order, orderPos, {color = entry.color, role = entry.role})
        end
    else
        if order ~= nil then
            for k,v in pairs(order) do
                if v.role == entry.role then
                    table.remove(order, k)
                    break
                end
            end
        end
    end
    setMsg()
end

for k = 1,20 do
    _G['remove' .. k] = function(obj, col)
        remove(obj, col, k)
    end
end

function send(clickedObject, playerColor)
    local steam_name = Player[playerColor].steam_name
    local sendColor, msg
    local players = Global.call('updatePlayers')
    if order[1].role == 'Evil_Info' then
        msg = COLORS_BBC[demonColor] .. '<' .. demonColor .. '>[-] [000000]' .. steam_name .. ':[-] ' .. evilMsg
        players[demonColor].print(msg)
        printToColor(msg, 'Black', {1,1,1})
        for i = 1, #minionColors do
            msg = COLORS_BBC[minionColors[i]] .. '<' .. minionColors[i] .. '>[-] [000000]' .. steam_name .. ':[-] ' .. evilMsg
            players[minionColors[i]].print(msg)
            printToColor(msg, 'Black', {1,1,1})
        end
    elseif order[1].role == 'Next_Night' then
        setNightOrder('other')
        setMsg()
        if blindAuto then
            if lastBlind ~= '' then
                players[lastBlind].blindfolded = true
                lastBlind = ''
            end
        end
        dayNum = dayNum + 1
        local history = Global.getVar('history')
        history = history .. '\n[808080]----------Day ' .. dayNum .. '----------[-]'
        Global.setVar('history', history)
        return
    else
        sendColor = order[1].color
        msg = COLORS_BBC[sendColor] .. '<' .. sendColor .. '>[-] [000000]' .. steam_name .. ':[-] ' .. sendMsg
        players[sendColor].print(msg)
        printToColor(msg, 'Black', {1,1,1})
        if blindAuto and order[1].role ~= 'Lunatic_InfoA' then
            if lastBlind == '' then
                lastBlind = order[1].color
                players[lastBlind].blindfolded = false
            else
                players[lastBlind].blindfolded = true
                lastBlind = order[1].color
                players[lastBlind].blindfolded = false
            end
        end
    end
    table.remove(order, 1)
    setMsg()
end

function skip(clickedObject, playerColor, i)
    table.remove(order, i)
    setMsg()
end

for k = 1,20 do
    _G['skip' .. k] = function(obj, col)
        skip(obj, col, k)
    end
end

function nullFunc() end

function firstNight(clickedObject, playerColor)
    setNightOrder('first')
end

function otherNight(clickedObject, playerColor)
    setNightOrder('other')
end

function charInput(obj, color, input, stillEditing)
    if not stillEditing then
        for k,v in pairs(CHARACTERS) do
            if string.lower(k) == string.lower(input) and input ~= '' then
                roleAdd = k
                break
            end
            if string.match(string.lower(k), string.lower(input)) and input ~= '' then
                roleAdd = k
                break
            end
        end
        refreshUI()
        return 1
    end
end

function colorInput(obj, color, input, stillEditing)
    if not stillEditing then
        for k,v in pairs(COLORS) do
            if string.match(string.lower(v), string.lower(input)) and input ~= '' then
                colorAdd = v
                break
            end
        end
        refreshUI()
        return 1
    end
end

function p1Input(obj, color, input, stillEditing)
    if not stillEditing then
        if input == '' then
            p1 = 'P1'
            return
        end
        local textColor
        local found = false
        for k,v in pairs(COLORS) do
            if string.match(string.lower(v), string.lower(input)) then
                p1 = COLORS_BBC[v] .. v .. '[-]'
                found = true
                break
            end
        end
        for k,v in pairs(CHARACTERS) do
            if string.match(string.lower(k), string.lower(input)) then
                if v.Type == 'Townsfolk' then
                    textColor = COLORS_BBC['Blue']
                elseif v.Type == 'Outsider' then
                    textColor = COLORS_BBC['Teal']
                elseif v.Type == 'Minion' then
                    textColor = COLORS_BBC['Orange']
                elseif v.Type == 'Demon' then
                    textColor = COLORS_BBC['Red']
                elseif v.Type == 'Traveller' then
                    textColor = COLORS_BBC['Green']
                end
                p1 = removeUnder(textColor .. k .. '[-]')
                found = true
                break
            end
        end
        if not found then
            p1 = input
        end
        editMsg()
        return 1
    end
end

function p2Input(obj, color, input, stillEditing)
    if not stillEditing then
        if input == '' then
            p2 = 'P2'
            return
        end
        local textColor
        local found = false
        for k,v in pairs(COLORS) do
            if string.match(string.lower(v), string.lower(input)) then
                p2 = COLORS_BBC[v] .. v .. '[-]'
                found = true
                break
            end
        end
        for k,v in pairs(CHARACTERS) do
            if string.match(string.lower(k), string.lower(input)) then
                if v.Type == 'Townsfolk' then
                    textColor = COLORS_BBC['Blue']
                elseif v.Type == 'Outsider' then
                    textColor = COLORS_BBC['Teal']
                elseif v.Type == 'Minion' then
                    textColor = COLORS_BBC['Orange']
                else
                    textColor = COLORS_BBC['Red']
                end
                p2 = removeUnder(textColor .. k .. '[-]')
                found = true
                break
            end
        end
        if not found then
            p2 = input
        end
        editMsg()
        return 1
    end
end

function p3Input(obj, color, input, stillEditing)
    if not stillEditing then
        if input == '' then
            p3 = ''
            return
        end
        local textColor
        local found = false
        for k,v in pairs(COLORS) do
            if string.match(string.lower(v), string.lower(input)) then
                p3 = COLORS_BBC[v] .. v .. '[-]'
                found = true
                break
            end
        end
        for k,v in pairs(CHARACTERS) do
            if string.match(string.lower(k), string.lower(input)) then
                if v.Type == 'Townsfolk' then
                    textColor = COLORS_BBC['Blue']
                elseif v.Type == 'Outsider' then
                    textColor = COLORS_BBC['Teal']
                elseif v.Type == 'Minion' then
                    textColor = COLORS_BBC['Orange']
                else
                    textColor = COLORS_BBC['Red']
                end
                p3 = removeUnder(textColor .. k .. '[-]')
                found = true
                break
            end
        end
        if not found then
            p3 = input
        end
        editMsg()
        return 1
    end
end

function editMsg()
    local msg = currentMsg
    msg = string.gsub(msg, 'P1', p1)
    msg = string.gsub(msg, 'P2', p2)
    msg = string.gsub(msg, 'P3', p3)
    sendMsg = removeUnder(msg)
    refreshUI()
end

function addChar(clickedObject, playerColor)
    if colorAdd == '' or roleAdd == '' then
        broadcastToColor('ERROR: The character or color field is empty.', playerColor, {1,0,0})
        return
    end
    local pos, colorIndex
    local orderPos, orderIndex
    for k,v in pairs(living) do
        if v.color == colorAdd then
            broadcastToColor('ERROR: That player already has a role.', playerColor, {1,0,0})
            return
        end
    end
    if #living == 0 then
        pos = 1
    else
        colorIndex = getKey(COLORS, colorAdd)
        for i = 1, #living do
            if colorIndex < getKey(COLORS, living[i].color) then
                pos = i
                break
            end
        end
        if pos == nil then
            pos = #living + 1
        end
    end
    table.insert(living, pos, {color = colorAdd, role = roleAdd})
    if roleAdd == 'Ravenkeeper' or roleAdd == 'Sage' or roleAdd == 'Barber' then
        refreshUI()
        return
    end
    if CHARACTERS[roleAdd].Type == 'Demon' or CHARACTERS[roleAdd].Type == 'Minion' then
        if CHARACTERS[roleAdd].Type == 'Demon' then
            demonColor = colorAdd
        elseif CHARACTERS[roleAdd].Type == 'Minion' then
            table.insert(minionColors, colorAdd)
        end
        local minionStr = 'Minions:'
        for i = 1, #minionColors do
            minionStr = minionStr .. ' ' .. COLORS_BBC[minionColors[i]] .. minionColors[i] .. '[-]'
        end
        evilMsg = 'Demon: ' .. COLORS_BBC[demonColor] .. demonColor .. '[-], ' .. minionStr
    end
    if orderRef ~= nil then
        orderIndex = getKey(orderRef, roleAdd)
        if orderIndex == nil then
            refreshUI()
            return
        end
        for i = 1, #order do
            if orderIndex < getKey(orderRef, order[i].role) then
                orderPos = i
                break
            end
        end
        if orderPos == nil then
            orderPos = #order + 1
        end
        table.insert(order, orderPos, {color = colorAdd, role = roleAdd})
        if roleAdd == 'Lunatic' then
            table.insert(order, 1, {role = 'Lunatic_InfoA', color = colorAdd})
            table.insert(order, 2, {role = 'Lunatic_InfoB', color = colorAdd})
            setMsg()
        end
    end
    setMsg()
end

function toggleBlind(clickedObject, playerColor)
    blindAuto = not blindAuto
    refreshUI()
    if blindAuto then
        broadcastToColor('Automatic blindfolding enabled.', playerColor, {1,1,1})
    else
        broadcastToColor('Automatic blindfolding disabled.', playerColor, {1,1,1})
    end
end

function format(string)
    local lineMax = 35
    local result
    local lineLen = 0
    local output = ''
    for word in string.gmatch(string, '%g+') do
        if lineLen + string.len(word) + 1 > lineMax then
            output = output .. '\n' .. word
            lineLen = string.len(word)
        else
            if lineLen == 0 then
                output = output .. word
                lineLen = lineLen + string.len(word)
            else
                output = output .. ' ' .. word
                lineLen = lineLen + 1 + string.len(word)
            end
        end
    end
    return output
end

------------------UI
function refreshUI()
    self.clearInputs()
    self.clearButtons()
    local buttonParam = {}
    local inputParam = {}

    buttonParam = {click_function = 'nullFunc', label = 'Living Players', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COLUMN[1],BUTTON_Y,LIVING_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE_LABEL,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Night Order', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COLUMN[4],BUTTON_Y,NIGHT_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE_LABEL,}
    self.createButton(buttonParam)

    for i = 1, #living do
        buttonParam = {click_function = 'nullFunc', function_owner = self, label = removeUnder(living[i].role), color = {0,0,0,1}, font_color = COLORS_RGB[living[i].color], position = {COLUMN[1],BUTTON_Y,ROW[i]}, width = 0, height = 0, font_size = FONT_SIZE,}
        self.createButton(buttonParam)

        if CHARACTERS[living[i].role].Ability == true then
            buttonParam = {click_function = 'used'..i, function_owner = self, color = {0,0,0,1}, position = {COLUMN[2],BUTTON_Y,ROW[i]}, width = 600, height = 200, font_size = 120, tooltip = 'Remove from list'}
            if abilityUsed[living[i].color] == false then
                buttonParam.label = 'Has\nAbility'
                buttonParam.font_color = stringColorToRGB('Blue')
            else
                buttonParam.label = 'No\nAbility'
                buttonParam.font_color = stringColorToRGB('Red')
            end
            self.createButton(buttonParam)
        end

        buttonParam = {click_function = 'remove'..i, function_owner = self, label = '✕', color = {0,0,0,1}, font_color = stringColorToRGB('Red'), position = {COLUMN[3],BUTTON_Y,ROW[i]}, width = 230, height = 230, font_size = FONT_SIZE, tooltip = 'Remove from list'}
        self.createButton(buttonParam)
    end

    if #order > 0 then
        buttonParam = {click_function = 'send', function_owner = self, label = removeUnder(order[1].role), color = {0,0,0,1}, font_color = COLORS_RGB[order[1].color], position = {COLUMN[4],BUTTON_Y,ROW[1]}, width = 1350, height = 225, font_size = FONT_SIZE,}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'skip1', function_owner = self, label = 'Skip', color = {0,0,0,1}, font_color = stringColorToRGB('Red'), position = {COLUMN[5],BUTTON_Y,ROW[1]}, width = 675, height = 200, font_size = FONT_SIZE,}
        self.createButton(buttonParam)
    end

    for i = 2, #order do
        buttonParam = {click_function = 'nullFunc', function_owner = self, label = removeUnder(order[i].role), color = {0,0,0,1}, font_color = COLORS_RGB[order[i].color], position = {COLUMN[4],BUTTON_Y,ROW[i]}, width = 0, height = 0, font_size = FONT_SIZE,}
        self.createButton(buttonParam)

        buttonParam = {click_function = 'skip'..i, function_owner = self, label = 'Skip', color = {0,0,0,1}, font_color = stringColorToRGB('Red'), position = {COLUMN[5],BUTTON_Y,ROW[i]}, width = 675, height = 200, font_size = FONT_SIZE,}
        self.createButton(buttonParam)
    end

    buttonParam = {click_function = 'nullFunc', label = 'Preview', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COLUMN[4],BUTTON_Y,PREVIEW_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE_LABEL,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = format(sendMsg), color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {COLUMN[4],BUTTON_Y,PREVIEW_MSG_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE,}
    self.createButton(buttonParam)


    buttonParam = {click_function = 'nullFunc', label = 'Add Character', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {ADDCHAR_LAB_X,BUTTON_Y,ADDCHAR_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE_LABEL,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Character', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {INPUTS_X[1],BUTTON_Y,INPUTS_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE,}
    self.createButton(buttonParam)


    buttonParam = {click_function = 'nullFunc', label = 'Color', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {INPUTS_X[2],BUTTON_Y,INPUTS_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Prompt1', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {INPUTS_X[3],BUTTON_Y,INPUTS_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Prompt2', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {INPUTS_X[4],BUTTON_Y,INPUTS_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'nullFunc', label = 'Prompt3', color = {1,1,1,1}, font_color = stringColorToRGB('White'), function_owner = self,
        position = {INPUTS_X[5],BUTTON_Y,INPUTS_LAB_Z}, rotation = {0,0,0}, width = 0, height = 0, font_size = FONT_SIZE,}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'addChar', label = '+', color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, position = {ADD_BUT_X,BUTTON_Y,INPUT_BUT_Z}, rotation = {0,0,0}, width = 333, height = 333, font_size = FONT_SIZE, tooltip = 'Add character to game'}
    self.createButton(buttonParam)

    inputParam = {input_function = 'charInput', color = stringColorToRGB('Grey'), function_owner = self, font_color = {0,0,0}, function_owner = self,
        position = {INPUTS_X[1],BUTTON_Y,INPUT_BUT_Z}, rotation = {0,0,0}, width = 1800, height = 260, font_size = FONT_SIZE, value = roleAdd, alignment = 3, validation = 1, tab = 2}
    self.createInput(inputParam)

    inputParam = {input_function = 'colorInput', color = stringColorToRGB('Grey'), function_owner = self, font_color = {0,0,0}, function_owner = self,
        position = {INPUTS_X[2],BUTTON_Y,INPUT_BUT_Z}, rotation = {0,0,0}, width = 900, height = 260, font_size = FONT_SIZE, value = colorAdd, alignment = 3, validation = 1, tab = 2}
    self.createInput(inputParam)

    inputParam = {input_function = 'p1Input', color = stringColorToRGB('Grey'), function_owner = self, font_color = {0,0,0}, function_owner = self,
        position = {INPUTS_X[3],BUTTON_Y,INPUT_BUT_Z}, rotation = {0,0,0}, width = 1500, height = 260, font_size = FONT_SIZE, value = p1, alignment = 3, validation = 1, tab = 2, label = 'P1'}
    self.createInput(inputParam)

    inputParam = {input_function = 'p2Input', color = stringColorToRGB('Grey'), function_owner = self, font_color = {0,0,0}, function_owner = self,
        position = {INPUTS_X[4],BUTTON_Y,INPUT_BUT_Z}, rotation = {0,0,0}, width = 1500, height = 260, font_size = FONT_SIZE, value = p2, alignment = 3, validation = 1, tab = 2, label = 'P2'}
    self.createInput(inputParam)

    inputParam = {input_function = 'p3Input', color = stringColorToRGB('Grey'), function_owner = self, font_color = {0,0,0}, function_owner = self,
        position = {INPUTS_X[5],BUTTON_Y,INPUT_BUT_Z}, rotation = {0,0,0}, width = 1500, height = 260, font_size = FONT_SIZE, value = p3, alignment = 3, validation = 1, tab = 2, label = 'P3'}
    self.createInput(inputParam)

    buttonParam = {click_function = 'import', label = 'Start', color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, position = {BOTTOM_BUT_X[1],BUTTON_Y,BOTTOM_BUT_Z}, rotation = {0,0,0}, width = 1125, height = 900, font_size = FONT_SIZE, tooltip = 'Import roles\nfrom game'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'firstNight', label = 'First\nNight', color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, position = {BOTTOM_BUT_X[2],BUTTON_Y,BOTTOM_BUT_Z}, rotation = {0,0,0}, width = 1125, height = 900, font_size = FONT_SIZE, tooltip = 'Set night order\nfor first night'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'otherNight', label = 'Other\nNights', color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, position = {BOTTOM_BUT_X[3],BUTTON_Y,BOTTOM_BUT_Z}, rotation = {0,0,0}, width = 1125, height = 900, font_size = FONT_SIZE, tooltip = 'Set night order\nfor other nights'}
    self.createButton(buttonParam)

    buttonParam = {click_function = 'toggleBlind', label = 'Auto\nBlindfold\nON', color = {1,1,1,1}, font_color = stringColorToRGB('Black'), function_owner = self, position = {BOTTOM_BUT_X[4],BUTTON_Y,BOTTOM_BUT_Z}, rotation = {0,0,0}, width = 1125, height = 900, font_size = FONT_SIZE, tooltip = 'Toggle Auto Blindfold'}
    if not blindAuto then
        buttonParam.label = 'Auto\nBlindfold\nOFF'
    end
    self.createButton(buttonParam)
end

function removeUnder(input)
    return string.gsub(input, '_', ' ')
end
